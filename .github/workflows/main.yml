name: build

on:
  push:
    branches: [ master, main, next, v2 ]
    tags-ignore:
      - 'v*'
    paths-ignore:
      - docs/*
      - '**/*.md'
      - test/*.go

  pull_request:
    branches: [ master, main, next, v2 ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go 1.18
      uses: actions/setup-go@v3
      with:
        go-version: 1.18
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: install tooling
      run: go install golang.org/x/tools/cmd/goimports@latest

    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v3
      with:
        version: latest
        install-only: true

    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Build cli
      run: task build-powershell build-snapshot
      shell: bash

    - uses: actions/upload-artifact@v3
      with:
        name: c8y.windows.amd64
        path: dist/windows_windows_amd64_v1/bin/c8y*
        if-no-files-found: error

    - uses: actions/upload-artifact@v3
      with:
        name: c8y.linux.amd64
        path: dist/linux_linux_amd64_v1/bin/c8y*
        if-no-files-found: error

    - uses: actions/upload-artifact@v3
      with:
        name: c8y.macos.amd64
        path: dist/macOS_darwin_amd64_v1/bin/c8y*
        if-no-files-found: error

    - uses: actions/upload-artifact@v3
      with:
        name: PSc8y Module
        path: output_pwsh/PSc8y/
        if-no-files-found: error

  test-examples:
    runs-on: ${{ matrix.os }}
    needs: [build]
    if: ${{ true }}
    env:
      C8Y_HOST: ${{ secrets.C8Y_HOST }}
      C8Y_TENANT: ${{ secrets.C8Y_TENANT }}
      C8Y_USER: ${{ secrets.C8Y_USER }}
      C8Y_USERNAME: ${{ secrets.C8Y_USER }}
      C8Y_PASSWORD: ${{ secrets.C8Y_PASSWORD }}

      # Max timeout for each request (in milliseconds)
      C8Y_SETTINGS_DEFAULTS_TIMEOUT: 30000

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go 1.18
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Install Task
      uses: arduino/setup-task@v1

    - uses: actions/download-artifact@v3
      id: download
      with:
        name: c8y.linux.amd64
        path: /home/runner/.local/bin/

    - name: Test c8y examples
      if: ${{ true }}
      run: |
        mv /home/runner/.local/bin/c8y* /home/runner/.local/bin/c8y || true
        chmod +x /home/runner/.local/bin/c8y
        echo "/home/runner/.local/bin" >> $GITHUB_PATH
        c8y version
        c8y currentuser get --select id
        task test-cli
      shell: bash
      timeout-minutes: 20

  test-pwsh:
    runs-on: ${{ matrix.os }}
    needs: [build]
    if: ${{ false }}
    env:
      C8Y_HOST: ${{ secrets.C8Y_HOST }}
      C8Y_TENANT: ${{ secrets.C8Y_TENANT }}
      C8Y_USER: ${{ secrets.C8Y_USER }}
      C8Y_PASSWORD: ${{ secrets.C8Y_PASSWORD }}

      # Max timeout for each request (in milliseconds)
      C8Y_SETTINGS_DEFAULTS_TIMEOUT: 30000

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go 1.18
      uses: actions/setup-go@v3
      with:
        go-version: 1.18
    
    - name: Install Task
      uses: arduino/setup-task@v1

    - name: Build powershell module
      run: task build-powershell build-snapshot
      shell: bash

    - name: Test powershell module
      if: ${{ true }}
      run: task test-powershell
      shell: bash
      timeout-minutes: 30

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: tools/PSc8y/reports/*.xml

  publish-test-results:
    runs-on: ubuntu-latest
    needs: [test-pwsh]
    # Disabled as pester does not support junit reports (only nunit)
    if: always() && false
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Get test results
        uses: actions/download-artifact@v3
        with:
          name: test-results-${{ matrix.os }}
          path: test-results-${{ matrix.os }}

      - name: Publish results
        uses: EnricoMi/publish-unit-test-result-action@v1.1
        if: always()
        with:
          check_name: Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: test-results-${{ matrix.os }}/*.xml
          log_level: DEBUG
