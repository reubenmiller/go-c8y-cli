version: '3'

# go install github.com/go-task/task/v3/cmd/task@latest
# zsh completions: https://github.com/sawadashota/go-task-completions

vars:
  TAG:
    sh: git describe | sed "s/^v\?\([0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\).*/\1/"
  VERSION: "{{base .TAG}}"
  OS_NAME: '{{ if eq OS "darwin" }}macOS{{ else }}{{OS}}{{ end }}'
  ARCH_NAME: '{{ if eq ARCH "amd64" }}amd64_v1{{ else }}{{ARCH}}{{ end }}'

env:
  C8Y_SETTINGS_CI: true
  GITHUB_TOKEN: ""

dotenv: ['.env', '{{.ENV}}/.env.', '{{.HOME}}/.env']

tasks:

  # ---------------------------------------------------------------
  # Helpers
  # ---------------------------------------------------------------
  show-version:
    desc: Show version
    cmds:
      - echo VERSION={{.VERSION}}

  show-vars:
    desc: Show global variables
    cmds:
      - cmd: echo OS_NAME={{.OS_NAME}}
        silent: true
      - cmd: echo ARCH_NAME={{.ARCH_NAME}}
        silent: true

  init-setup:
    desc: Initialize setup
    cmds:
      - ./scripts/setup.sh
      - pwsh -File ./scripts/build-powershell/install.ps1
  
  install-c8y:
    desc: Install c8y in dev environment
    deps:
      - build-snapshot
    cmds:
      - |
        if [ ! -f /usr/local/bin/c8y ]; then \
          sudo ln -s "$(pwd)/tools/PSc8y/Dependencies/c8y.linux" /usr/local/bin/c8y; \
        fi
        cp ./tools/shell/c8y.plugin.sh ~/
        echo "source ~/c8y.plugin.sh"  >> ~/.bashrc

        echo Installed c8y successfully


  # ---------------------------------------------------------------
  # Docs
  # ---------------------------------------------------------------
  docs:
    desc: Update all docs
    deps:
      - docs-powershell
      - docs-c8y
  
  docs-powershell:
    desc: Update the powershell docs
    cmds:
      - pwsh -File ./scripts/build-powershell/build-docs.ps1 -Recreate -OutputFolder "docs/go-c8y-cli/docs/cli/psc8y"
  
  docs-c8y:
    desc: create c8y documentation
    cmds:
      - go run ./cmd/gen-docs --website --doc-path "docs/go-c8y-cli/docs/cli/c8y"

  manpages:
    desc: create c8y man packages
    cmds:
      - go run ./cmd/gen-docs --man-page --doc-path "./share/man/man1/"


  # ---------------------------------------------------------------
  # Github pages
  # ---------------------------------------------------------------
  gh-pages-install:
    desc: Install github pages dependencies for viewing docs locally
    cmds:
      - cd docs/go-c8y-cli && npm install

  gh-pages:
    desc: Run github pages locally
    cmds:
      - cd docs/go-c8y-cli && npm start
    deps:
      - build-gh-pages

  build-gh-pages:
    desc: build github pages
    dir: docs/go-c8y-cli
    cmds:
      - npm install
      - npm run write-translations
      - npm run build

  gh-pages-prod:
    desc: build/serve github pages (production)
    dir: docs/go-c8y-cli
    cmds:
      - npm run serve
    deps:
      - build-gh-pages


  # ---------------------------------------------------------------
  # Spec and code generation
  # ---------------------------------------------------------------
  update-spec:
    desc: Update json specifications
    cmds:
      - ./scripts/generate-spec.sh
    sources:
      - api/spec/yaml/*.yaml
    generates:
      - api/spec/json/*.json
  
  generate-go-code:
    desc: Generate go code from specifications
    cmds:
      - pwsh -File scripts/build-cli/build.ps1
    deps:
      # Use deps so that the source/generates works properly
      - update-spec
    sources:
      - api/spec/json/*.json
      - scripts/**/*.ps1
    generates:
      - pkg/cmd/**/*.auto.go

  generate-cli-tests:
    desc: Generate CLI tests from the examples in the api specs
    cmds:
      - chmod +x ./scripts/build-cli-tests.sh
      - ./scripts/build-cli-tests.sh
    sources:
      - cmd/gen-tests/main.go
      - api/spec/yaml/*.yaml
    generates:
      - tests/auto/**/tests/*.yaml

  # ---------------------------------------------------------------
  # Linting
  # ---------------------------------------------------------------
  lint:
    desc: Lint
    cmds:
      - golangci-lint run

  # ---------------------------------------------------------------
  # Build
  # ---------------------------------------------------------------
  build-fast:
    desc: Build Fast
    vars:
      OUTPUT: .bin/c8y
      GIT_BRANCH:
        sh: git rev-parse --abbrev-ref HEAD
      GOOS: "{{.GOOS}}"
      GOARCH: "{{.GOARCH}}"
    env:
      GOOS: "{{.GOOS | default OS}}"
      GOARCH: "{{.GOARCH | default ARCH}}"
    cmds:
      - echo "GOOS=$GOOS, GOARCH=$GOARCH"
      - go build -o {{.OUTPUT}} -ldflags="-s -w -X 'github.com/reubenmiller/go-c8y-cli/v2/pkg/cmd.buildVersion={{trimPrefix "v" .VERSION}}' -X 'github.com/reubenmiller/go-c8y-cli/v2/pkg/cmd.buildBranch={{.GIT_BRANCH}}'" cmd/c8y/main.go

  build:
    desc: Build
    cmds:
      - goreleaser build --rm-dist
  
  build-snapshot:
    desc: Build Snapshot
    cmds:
      - goreleaser build --rm-dist --snapshot {{.CLI_ARGS}}

  build-snapshot-single:
    desc: Build Snapshot (single) for the current operating system
    cmds:
      - goreleaser build --rm-dist --snapshot --single-target --id {{.OS_NAME}} {{.CLI_ARGS}}
      - rm -f .bin/c8y
      - mkdir -p .bin
      - cp dist/{{.OS_NAME}}_{{OS}}_{{.ARCH_NAME}}/bin/c8y .bin/c8y

  generate:
    desc: Generate the cli code
    cmds:
      - go mod tidy
      - task: update-spec
      - task: generate-go-code
      - task: generate-cli-tests
      - task: build-powershell
      - task: manpages
      - task: build-completions
      - task: checkout-addons

  build-powershell:
    desc: Build the powershell module
    cmds:
      - pwsh -File scripts/build-powershell/build.ps1
      - rm -Rf output_pwsh
      - mkdir -p output_pwsh
      - cp -R tools/PSc8y/dist/PSc8y output_pwsh/
    sources:
      - api/spec/json/*.json
      - scripts/**/*.ps1
      - tools/PSc8y/Public-manual/*.ps1
      - tools/PSc8y/Private/*.ps1
      - tools/PSc8y/completions/*.ps1
      - tools/PSc8y/utilities/*.ps1
      - tools/PSc8y/tools/*.ps1
    generates:
      - tools/PSc8y/**/*.ps1
      - output_pwsh/PSc8y
      - output_pwsh/PSc8y.zip

  build-completions:
    desc: Build completions
    env:
      OUTPUT_DIR: ./output
    cmds:
      - ./tools/shell/completion/build_completions.sh
  
  build-powershell-completions:
    desc: Build powershell completions
    summary: |
      Do not trigger when building in CI/CD as it needs a already build module to work.
      The file should be run manually in development and the output should then be committed
      so it is included in the next build.
    cmds:
      -  pwsh -File tools/PSc8y/tools/build.completions.ps1

  checkout-addons:
    desc: Checkout the go-c8y-cli-addons repository
    env:
      OUTPUT_DIR: ./output
    cmds:
      - ./tools/shell/addons/checkout_addons.sh

  # ---------------------------------------------------------------
  # Tests
  # ---------------------------------------------------------------
  test-powershell:
    desc: Run powershell tests
    cmds:
      - env C8Y_BINARY=$(which c8y) pwsh -ExecutionPolicy bypass -NonInteractive -File tools/PSc8y/test.ps1

  install-test-dependencies:
    desc: Install test dependencies
    cmds:
      - go install github.com/reubenmiller/commander/v3/cmd/commander@v3.0.2
    status:
      - command -v commander

  test-cli:
    desc: Test cli tests
    deps: [test-cli-auto, test-cli-manual]

  test-cli-manual:
    desc: Run manual cli tests
    summary: |
      # Run manual cli tests

      Usage:
        task test-cli-manual -- [subcommand]

      Example
        task test-cli-manual -- configuration
    deps: [install-test-dependencies]
    vars:
      FILTER: "*"
    cmds:
      - ./tests/run-manual.sh {{.CLI_ARGS}}
  
  test-cli-auto:
    desc: Run auto generated cli tests
    summary: |
      Additional arguments can be run using
      task test-cli-auto -- software 
    deps: [install-test-dependencies]
    cmds:
      - ./tests/scripts/setup.sh
      - ./tests/run-auto.sh {{.CLI_ARGS}}

  test-installation:
    desc: Test installation of linux packages
    cmds:
      - chmod +x ./tools/integration-tests/run.sh
      - sudo ./tools/integration-tests/run.sh

  # ---------------------------------------------------------------
  # Release/Publish
  # ---------------------------------------------------------------
  release:
    desc: Publish release
    cmds:
      - git status
      - git diff
      - goreleaser release --rm-dist --auto-snapshot

  publish-powershell:
    desc: Publish powershell module
    cmds:
      - pwsh -File ./scripts/build-powershell/publish.ps1 -ArtifactFolder output_pwsh/PSc8y

  publish-linux-packages:
    desc: Publish linux packages (apk,deb,rpm)
    summary: |
      Publishing requires the JFROG_APIKEY to be set
    cmds:
      - chmod +x ./tools/publish-packages.sh
      - ./tools/publish-packages.sh ./dist

  # ---------------------------------------------------------------
  # Docker examples
  # ---------------------------------------------------------------
  run-docker-shell:
    desc: Run shell docker image
    interactive: true
    cmds:
      - |
        docker run -it --rm \
          -e C8Y_HOST=$C8Y_HOST \
          -e C8Y_TENANT=$C8Y_TENANT \
          -e C8Y_TOKEN=$C8Y_TOKEN \
          -e C8Y_USER=$C8Y_USER \
          -e C8Y_PASSWORD=$C8Y_PASSWORD \
          reubenmiller/c8y-shell

  run-docker-pwsh:
    desc: Run pwsh docker image
    interactive: true
    cmds:
      - |
        docker run -it --rm \
          -e C8Y_HOST=$C8Y_HOST \
          -e C8Y_TENANT=$C8Y_TENANT \
          -e C8Y_TOKEN=$C8Y_TOKEN \
          -e C8Y_USER=$C8Y_USER \
          -e C8Y_PASSWORD=$C8Y_PASSWORD \
          reubenmiller/c8y-pwsh
