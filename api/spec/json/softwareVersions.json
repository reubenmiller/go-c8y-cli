{
  "group": {
    "name": "software/versions",
    "description": "Cumulocity software version management",
    "descriptionLong": "Software version management to create/list/delete versions",
    "link": "https://cumulocity.com/guides/users-guide/device-management/#software-repo"
  },
  "commands": [
    {
      "name": "getSoftwareVersionCollection",
      "method": "GET",
      "description": "Get software package version collection",
      "descriptionLong": "Get a collection of software package versions (managedObjects) based on filter parameters",
      "path": "inventory/managedObjects",
      "accept": "application/vnd.com.nsn.cumulocity.managedObjectCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "collectionProperty": "managedObjects",
      "alias": {
        "go": "list",
        "powershell": "Get-SoftwareVersionCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a list of software package versions",
            "beforeEach": [
              "$software = PSc8y\\New-Software -Name \"testMO\"",
              "$softwareVersion = PSc8y\\New-SoftwareVersion -Software $software.id -Version \"1.0.0\" -Url \"https://test.com/file.mender\""
            ],
            "command": "Get-SoftwareVersionCollection -Software $software.id",
            "afterEach": [
              "Remove-Software -Id $software.id -ErrorAction SilentlyContinue"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a list of software package versions",
            "command": "c8y software versions list --software 12345",
            "assertStdOut": {
              "json": {
                "query": "r/bygroupid\\(12345\\)"
              },
              "contains": [
                "bygroupid(12345)"
              ]
            }
          },
          {
            "description": "Get a list of software package versions from multiple software packages",
            "command": "c8y software list | c8y software versions list",
            "skipTest": true
          }
        ]
      },
      "queryParameters": [
        {
          "name": "query",
          "description": "Query expression group",
          "property": "query",
          "type": "queryExpression",
          "children": [
            {
              "name": "query",
              "type": "string",
              "description": "Additional query filter",
              "format": "%s"
            },
            {
              "name": "queryTemplate",
              "type": "string",
              "description": "String template to be used when applying the given query. Use %s to reference the query/pipeline input"
            },
            {
              "name": "orderBy",
              "type": "string",
              "description": "Order by. e.g. _id asc or name asc or creationTime.date desc",
              "default": "creationTime.date desc,creationTime desc"
            },
            {
              "name": "software",
              "type": "software[]",
              "description": "Software package id or name",
              "format": "bygroupid(%s)",
              "pipeline": true,
              "pipelineAliases": [
                "additionParents.references.0.managedObject.id",
                "id"
              ]
            },
            {
              "name": "ignorePatches",
              "type": "stringStatic",
              "description": "",
              "value": "not(has(c8y_Patch))"
            },
            {
              "name": "onlyIncludeVersions",
              "type": "stringStatic",
              "description": "Only include software like items otherwise if the user does not specify the software, then other items are returned",
              "value": "type eq 'c8y_SoftwareBinary'"
            },
            {
              "name": "version",
              "type": "string",
              "description": "Filter by version",
              "format": "(c8y_Software.version eq '%s')"
            },
            {
              "name": "url",
              "type": "string",
              "description": "Filter by url",
              "format": "(c8y_Software.url eq '%s')"
            }
          ]
        },
        {
          "name": "skipChildrenNames",
          "type": "boolean",
          "description": "Don't include the child devices names in the response. This can improve the API response because the names don't need to be retrieved"
        },
        {
          "name": "withChildren",
          "type": "boolean",
          "description": "Determines if children with ID and name should be returned when fetching the managed object. Set it to false to improve query performance."
        },
        {
          "name": "withChildrenCount",
          "type": "boolean",
          "description": "When set to true, the returned result will contain the total number of children in the respective objects (childAdditions, childAssets and childDevices)"
        },
        {
          "name": "withGroups",
          "type": "boolean",
          "description": "When set to true it returns additional information about the groups to which the searched managed object belongs. This results in setting the assetParents property with additional information about the groups."
        },
        {
          "name": "withParents",
          "type": "booleanDefault",
          "description": "Include parent references",
          "default": "true"
        }
      ]
    },
    {
      "name": "getSoftwareVersion",
      "description": "Get software package version",
      "descriptionLong": "Get an existing software package version",
      "method": "GET",
      "path": "inventory/managedObjects/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "get",
        "powershell": "Get-SoftwareVersion"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a software package version using name",
            "beforeEach": [
              "$software = PSc8y\\New-Software -Name \"testMO\"",
              "$softwareVersion = PSc8y\\New-SoftwareVersion -Software $software.id -Version \"1.0.0\" -Url \"https://test.com/file.mender\""
            ],
            "command": "Get-SoftwareVersion -Id $softwareVersion.id",
            "afterEach": [
              "Remove-Software -Id $software.id -ErrorAction SilentlyContinue"
            ]
          },
          {
            "description": "Get a software package version (using pipeline)",
            "beforeEach": [
              "$software = PSc8y\\New-Software -Name \"testMO\"",
              "$softwareVersion = PSc8y\\New-SoftwareVersion -Software $software.id -Version \"1.0.0\" -Url \"https://test.com/file.mender\""
            ],
            "command": "Get-ManagedObject -Id $softwareVersion.id | Get-SoftwareVersion",
            "afterEach": [
              "Remove-Software -Id $software.id -ErrorAction SilentlyContinue"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a software package version using name",
            "command": "c8y software versions get --software 11111 --id 1.0.0",
            "skipTest": true,
            "assertStdOut": {
              "json": {
                "query": "r/type eq 'c8y_Firmware'"
              }
            }
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "softwareversion[]",
          "dependsOn": [
            "software"
          ],
          "pipeline": true,
          "required": true,
          "description": "Software Package version id or name"
        },
        {
          "name": "software",
          "type": "software[]",
          "required": false,
          "description": "Software package id (used to help completion be more accurate)"
        }
      ],
      "queryParameters": [
        {
          "name": "skipChildrenNames",
          "type": "boolean",
          "description": "Don't include the child devices names in the response. This can improve the API response because the names don't need to be retrieved"
        },
        {
          "name": "withChildren",
          "type": "boolean",
          "description": "Determines if children with ID and name should be returned when fetching the managed object. Set it to false to improve query performance."
        },
        {
          "name": "withChildrenCount",
          "type": "boolean",
          "description": "When set to true, the returned result will contain the total number of children in the respective objects (childAdditions, childAssets and childDevices)"
        },
        {
          "name": "withGroups",
          "type": "boolean",
          "description": "When set to true it returns additional information about the groups to which the searched managed object belongs. This results in setting the assetParents property with additional information about the groups."
        },
        {
          "name": "withParents",
          "type": "boolean",
          "description": "Include a flat list of all parents and grandparents of the given object"
        }
      ]
    },
    {
      "name": "deleteSoftwareVersion",
      "description": "Delete software package version",
      "descriptionLong": "Delete an existing software package version",
      "method": "DELETE",
      "path": "inventory/managedObjects/{id}",
      "accept": "",
      "alias": {
        "go": "delete",
        "powershell": "Remove-SoftwareVersion"
      },
      "examples": {
        "powershell": [
          {
            "description": "Delete a software package",
            "beforeEach": [
              "$mo = PSc8y\\New-ManagedObject -Name \"testMO\""
            ],
            "command": "Remove-SoftwareVersion -Id $mo.id",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          },
          {
            "description": "Delete a software package (using pipeline)",
            "beforeEach": [
              "$mo = PSc8y\\New-ManagedObject -Name \"testMO\""
            ],
            "command": "Get-ManagedObject -Id $mo.id | Remove-SoftwareVersion",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          },
          {
            "description": "Delete a software package and all related versions",
            "beforeEach": [
              "$Device = PSc8y\\New-TestDevice"
            ],
            "command": "Get-ManagedObject -Id $Device.id | Remove-SoftwareVersion -ForceCascade:$false",
            "afterEach": [
              "Remove-ManagedObject -Id $Device.id -ErrorAction SilentlyContinue",
              "Remove-ManagedObject -Id $ChildDevice.id -ErrorAction SilentlyContinue"
            ]
          }
        ],
        "go": [
          {
            "description": "Delete a software package and all related versions",
            "command": "c8y software versions delete --id 22222"
          },
          {
            "description": "Delete a software package (but keep any child binaries)",
            "command": "c8y software versions delete --id 12345 --forceCascade=false"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "softwareversion[]",
          "dependsOn": [
            "software"
          ],
          "pipeline": true,
          "required": true,
          "description": "Software Package version id or name"
        },
        {
          "name": "software",
          "type": "software[]",
          "required": false,
          "description": "Software package id (used to help completion be more accurate)"
        }
      ],
      "queryParameters": [
        {
          "name": "forceCascade",
          "type": "booleanDefault",
          "default": "true",
          "description": "Remove version and any related binaries"
        }
      ]
    },
    {
      "name": "installSoftwareVersion",
      "description": "Install software version on a device",
      "descriptionLong": "Install software version on a device",
      "method": "POST",
      "path": "devicecontrol/operations",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "install",
        "powershell": "Install-SoftwareVersion"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a software package",
            "skipTest": true,
            "command": "Install-SoftwareVersion -Device $mo.id -Software go-c8y-cli -Version 1.0.0"
          }
        ],
        "go": [
          {
            "description": "Install a software package version\nIf the software/version exists in the software repository, then it will add the url automatically\n",
            "command": "c8y software versions install --device 1234 --software go-c8y-cli --version 1.0.0",
            "skipTest": true
          },
          {
            "description": "Install a software package version with an explicit url\n",
            "command": "c8y software versions install --device 1234 --software go-c8y-cli --version 1.0.0 --url \"https://mybloblstore/go-c8y-cli.deb\"",
            "skipTest": true
          }
        ]
      },
      "body": [
        {
          "name": "device",
          "type": "device[]",
          "property": "deviceId",
          "description": "Device or agent where the software should be installed",
          "pipeline": true
        },
        {
          "name": "software",
          "type": "softwareName",
          "required": true,
          "property": "c8y_SoftwareUpdate.0.name",
          "description": "Software name"
        },
        {
          "name": "version",
          "type": "softwareversionName",
          "required": false,
          "dependsOn": [
            "software"
          ],
          "property": "c8y_SoftwareUpdate.0.version",
          "description": "Software version id or name"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "property": "c8y_SoftwareUpdate.0.url",
          "description": "Software url. Leave blank to automatically set it if a matching firmware/version is found in the c8y firmware repository"
        },
        {
          "name": "description",
          "type": "string",
          "description": "Operation description",
          "default": "Install software package"
        },
        {
          "name": "softwareDetails",
          "type": "softwareDetails",
          "position": 98,
          "property": "c8y_SoftwareUpdate.0",
          "description": "Computed parameter which is filled in when the software details, name, version and url"
        },
        {
          "name": "action",
          "type": "string",
          "static": true,
          "position": 99,
          "description": "Software action",
          "property": "c8y_SoftwareUpdate.0.action",
          "default": "install",
          "validationSet": [
            "install"
          ]
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties describing the operation which will be performed on the device."
        }
      ],
      "bodyRequiredKeys": [
        "deviceId",
        "c8y_SoftwareUpdate.0.name",
        "c8y_SoftwareUpdate.0.version",
        "c8y_SoftwareUpdate.0.action"
      ]
    },
    {
      "name": "uninstallSoftwareVersion",
      "description": "Uninstall software version on a device",
      "descriptionLong": "Uninstall software version on a device",
      "method": "POST",
      "path": "devicecontrol/operations",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "uninstall",
        "powershell": "Remove-SoftwareVersion"
      },
      "examples": {
        "powershell": [
          {
            "description": "Uninstall a software package version",
            "skipTest": true,
            "command": "Remove-SoftwareVersion -Device $mo.id -Software go-c8y-cli -Version 1.0.0"
          }
        ],
        "go": [
          {
            "description": "Uninstall a software package version",
            "command": "c8y software versions uninstall --device 1234 --software go-c8y-cli --version 1.0.0"
          }
        ]
      },
      "body": [
        {
          "name": "device",
          "type": "device[]",
          "property": "deviceId",
          "description": "Device or agent where the software should be installed",
          "pipeline": true
        },
        {
          "name": "software",
          "type": "softwareName",
          "required": true,
          "property": "c8y_SoftwareUpdate.0.name",
          "description": "Software name"
        },
        {
          "name": "version",
          "type": "softwareversionName",
          "dependsOn": [
            "software"
          ],
          "required": false,
          "property": "c8y_SoftwareUpdate.0.version",
          "description": "Software version name or id"
        },
        {
          "name": "action",
          "type": "string",
          "static": true,
          "description": "Software action",
          "property": "c8y_SoftwareUpdate.0.action",
          "default": "delete",
          "validationSet": [
            "delete"
          ]
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties describing the operation which will be performed on the device."
        }
      ],
      "bodyRequiredKeys": [
        "deviceId",
        "c8y_SoftwareUpdate.0.name",
        "c8y_SoftwareUpdate.0.action"
      ]
    }
  ]
}
