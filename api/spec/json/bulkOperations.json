{
  "information": {
    "name": "bulkOperations",
    "description": "Cumulocity bulk operations",
    "descriptionLong": "REST endpoint to interact with Cumulocity bulk operations",
    "link": "https://cumulocity.com/guides/reference/device-control/#bulk-operation-collection"
  },
  "endpoints": [
    {
      "name": "getBulkOperationCollection",
      "method": "GET",
      "description": "Get bulk operation collection",
      "descriptionLong": "Get a collection of bulk operations",
      "path": "devicecontrol/bulkoperations",
      "accept": "application/vnd.com.nsn.cumulocity.bulkOperationCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.bulkoperation+json",
      "collectionProperty": "bulkOperations",
      "alias": {
        "go": "list",
        "powershell": "Get-BulkOperationCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a list of bulk operations",
            "beforeEach": [
              "$Group = New-TestDeviceGroup -TotalDevices 2",
              "$BulkOp = New-BulkOperation -Group $Group.id -CreationRampSec 10 -Operation @{c8y_Restart=@{}}"
            ],
            "command": "Get-BulkOperationCollection",
            "afterEach": [
              "Get-BulkOperationCollection | Remove-BulkOperation",
              "Remove-DeviceGroup -Id $Group.id -Cascade"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a list of bulk operations",
            "command": "c8y bulkoperations list"
          },
          {
            "description": "Get a list of bulk operations created in the last 1 day",
            "command": "c8y bulkoperations list --dateFrom -1d",
            "assertStdOut": {
              "json": {
                "query": "r/dateFrom=\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*$"
              }
            }
          },
          {
            "description": "Get a list of bulk operations in the general status SCHEDULED or EXECUTING",
            "command": "c8y bulkoperations list --status SCHEDULED --status EXECUTING",
            "assertStdOut": {
              "json": {
                "query": "generalStatus=SCHEDULED&generalStatus=EXECUTING"
              }
            }
          }
        ]
      },
      "queryParameters": [
        {
          "name": "withDeleted",
          "type": "boolean",
          "description": "Include CANCELLED bulk operations"
        },
        {
          "name": "dateFrom",
          "type": "datetime",
          "description": "Start date or date and time of the bulk operation"
        },
        {
          "name": "dateTo",
          "type": "datetime",
          "description": "End date or date and time of the bulk operation"
        },
        {
          "name": "status",
          "property": "generalStatus",
          "type": "[]string",
          "description": "Operation status, can be one of SUCCESSFUL, FAILED, EXECUTING or PENDING.",
          "validationSet": [
            "CANCELED",
            "SCHEDULED",
            "EXECUTING",
            "EXECUTING_WITH_ERROR",
            "FAILED"
          ]
        }
      ]
    },
    {
      "name": "getBulkOperation",
      "description": "Get bulk operation",
      "descriptionLong": "Get an existing bulk operation",
      "method": "GET",
      "examples": {
        "powershell": [
          {
            "description": "Get bulk operation by id",
            "beforeEach": [
              "$Group = New-TestDeviceGroup -TotalDevices 2",
              "$BulkOp = New-BulkOperation -Group $Group.id -CreationRampSec 10 -Operation @{c8y_Restart=@{}}"
            ],
            "command": "Get-BulkOperation -Id $BulkOp.id",
            "afterEach": [
              "Get-BulkOperationCollection | Remove-BulkOperation",
              "Remove-DeviceGroup -Id $Group.id -Cascade"
            ]
          }
        ],
        "go": [
          {
            "description": "Get bulk operation by id",
            "command": "c8y bulkoperations get --id 12345"
          }
        ]
      },
      "path": "devicecontrol/bulkoperations/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.bulkoperation+json",
      "alias": {
        "go": "get",
        "powershell": "Get-BulkOperation"
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Bulk Operation id"
        }
      ]
    },
    {
      "name": "deleteBulkOperation",
      "description": "Delete bulk operation",
      "descriptionLong": "Delete bulk operation/s. Only bulk operations that are in ACTIVE or IN_PROGRESS can be deleted",
      "method": "DELETE",
      "examples": {
        "powershell": [
          {
            "description": "Remove bulk operation by id",
            "beforeEach": [
              "$Group = New-TestDeviceGroup -TotalDevices 2",
              "$BulkOp = New-BulkOperation -Group $Group.id -CreationRampSec 10 -Operation @{c8y_Restart=@{}}"
            ],
            "command": "Remove-BulkOperation -Id $BulkOp.id",
            "afterEach": [
              "Remove-DeviceGroup -Id $Group.id -Cascade"
            ]
          }
        ],
        "go": [
          {
            "description": "Remove bulk operation by id",
            "command": "c8y bulkoperations delete --id 12345"
          }
        ]
      },
      "path": "devicecontrol/bulkoperations/{id}",
      "alias": {
        "go": "delete",
        "powershell": "Remove-BulkOperation"
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Bulk Operation id"
        }
      ]
    },
    {
      "name": "newBulkOperation",
      "method": "POST",
      "path": "devicecontrol/bulkoperations",
      "accept": "application/vnd.com.nsn.cumulocity.bulkoperation+json",
      "description": "Create bulk operation",
      "descriptionLong": "Create a new bulk operation",
      "examples": {
        "powershell": [
          {
            "description": "Create bulk operation for a group",
            "beforeEach": [
              "$Group = New-TestDeviceGroup -TotalDevices 2"
            ],
            "command": "New-BulkOperation -Group $Group.id -StartDate \"60s\" -CreationRampSec 15 -Operation @{ c8y_Restart = @{} }",
            "afterEach": [
              "Get-BulkOperationCollection | Remove-BulkOperation",
              "Remove-DeviceGroup -Id $Group.id -Cascade"
            ]
          },
          {
            "description": "Create bulk operation for a group (using pipeline)",
            "beforeEach": [
              "$Group = New-TestDeviceGroup -TotalDevices 2"
            ],
            "command": "Get-DeviceGroup $Group.id | New-BulkOperation -StartDate \"10s\" -CreationRampSec 15 -Operation @{ c8y_Restart = @{} }",
            "afterEach": [
              "Get-BulkOperationCollection | Remove-BulkOperation",
              "Remove-DeviceGroup -Id $Group.id -Cascade"
            ]
          }
        ],
        "go": [
          {
            "description": "Create bulk operation for a group",
            "command": "c8y bulkoperations create --group 1234 --startDate \"60s\" --creationRampSec 15 --operation \"c8y_Restart={}\""
          },
          {
            "description": "Create bulk operation for a group (using pipeline)",
            "command": "c8y devicegroups get --id 12345 | c8y bulkoperations create --startDate \"10s\" --creationRampSec 15 --operation \"c8y_Restart={}\""
          }
        ]
      },
      "alias": {
        "go": "create",
        "powershell": "New-BulkOperation"
      },
      "body": [
        {
          "name": "group",
          "type": "[]devicegroup",
          "property": "groupId",
          "required": false,
          "pipeline": true,
          "description": "Identifies the target group on which this operation should be performed."
        },
        {
          "name": "startDate",
          "type": "datetime",
          "required": false,
          "default": "",
          "description": "Time when operations should be created. Defaults to 300s"
        },
        {
          "name": "creationRampSec",
          "property": "creationRamp",
          "type": "float",
          "required": false,
          "description": "Delay between every operation creation."
        },
        {
          "name": "operation",
          "property": "operationPrototype",
          "type": "json_custom",
          "required": false,
          "description": "Operation prototype to send to each device in the group"
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties describing the bulk operation which will be performed on the device group."
        }
      ],
      "bodyTemplate": {
        "type": "jsonnet",
        "applyLast": false,
        "template": "{startDate: _.Now('300s'), creationRamp: 1.000}"
      },
      "bodyRequiredKeys": [
        "groupId",
        "startDate",
        "creationRamp",
        "operationPrototype"
      ]
    },
    {
      "name": "updateBulkOperation",
      "description": "Update bulk operation",
      "descriptionLong": "Update bulk operation. Making update on a started bulk operation cancels it and creates/schedules a new one.",
      "examples": {
        "powershell": [
          {
            "description": "Update bulk operation wait period between the creation of each operation to 1.5 seconds",
            "beforeEach": [
              "$Group = New-TestDeviceGroup -TotalDevices 2",
              "$BulkOp = New-BulkOperation -Group $Group.id -CreationRampSec 10 -Operation @{c8y_Restart=@{}}"
            ],
            "command": "Update-BulkOperation -Id $BulkOp.id -CreationRamp 1.5",
            "afterEach": [
              "Get-BulkOperationCollection | Remove-BulkOperation",
              "Remove-DeviceGroup -Id $Group.id -Cascade"
            ]
          }
        ],
        "go": [
          {
            "description": "Update an bulk operation",
            "command": "c8y bulkoperations update --id 12345 --creationRampSec 15"
          }
        ]
      },
      "method": "PUT",
      "path": "devicecontrol/bulkoperations/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.bulkoperation+json",
      "alias": {
        "go": "update",
        "powershell": "Update-BulkOperation"
      },
      "body": [
        {
          "name": "creationRampSec",
          "property": "creationRamp",
          "type": "float",
          "required": false,
          "description": "Delay between every operation creation."
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties to update on the bulk operation."
        }
      ],
      "bodyRequiredKeys": [
        "creationRamp"
      ],
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "description": "Bulk Operation id",
          "pipeline": true,
          "required": true
        }
      ]
    },
    {
      "name": "listBulkOperationOperations",
      "method": "GET",
      "description": "Get operations collection",
      "descriptionLong": "Get a collection of operations related to a bulk operation",
      "path": "devicecontrol/operations",
      "accept": "application/vnd.com.nsn.cumulocity.operationCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.operation+json",
      "collectionProperty": "operations",
      "alias": {
        "go": "listOperations",
        "powershell": "Get-BulkOperationOperationCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a list of pending operations from bulk operation with id 10",
            "command": "Get-BulkOperationOperationCollection -Id 10 -Status PENDING",
            "skipTest": true
          },
          {
            "description": "Get all pending operations from all bulk operations which are still in progress (using pipeline)",
            "command": "Get-BulkOperationCollection | Where-Object { $_.status -eq \"IN_PROGRESS\" } | Get-BulkOperationOperationCollection -Status PENDING",
            "skipTest": true
          },
          {
            "description": "Check all bulk operations if they have any related operations still in executing state and were created more than 10 days ago, then cancel it with a custom message",
            "command": "Get-BulkOperationCollection | Get-BulkOperationOperationCollection -status EXECUTING --dateTo \"-10d\" | Update-Operation -Status FAILED -FailureReason \"Manually cancelled stale operation\"",
            "skipTest": true
          }
        ],
        "go": [
          {
            "description": "Get a list of pending operations from bulk operation with id 10",
            "command": "c8y bulkoperations listOperations --id 10 --status PENDING"
          },
          {
            "description": "Get all pending operations from all bulk operations which are still in progress (using pipeline)",
            "command": "c8y bulkoperations list --filter \"status eq IN_PROGRESS\" | c8y bulkoperations listOperations --status PENDING"
          },
          {
            "description": "Check all bulk operations if they have any related operations still in executing state and were created more than 10 days ago, then cancel it with a custom message",
            "command": "c8y bulkoperations list | c8y bulkoperations listOperations --status EXECUTING --dateTo \"-10d\" | c8y operations update --status FAILED --failureReason \"Manually cancelled stale operation\"",
            "skipTest": true
          }
        ]
      },
      "queryParameters": [
        {
          "name": "id",
          "type": "[]id",
          "property": "bulkOperationId",
          "pipeline": true,
          "required": true,
          "pipelineAliases": [
            "id",
            "bulkOperationId"
          ],
          "description": "Bulk operation id."
        },
        {
          "name": "dateFrom",
          "type": "datetime",
          "description": "Start date or date and time of operation."
        },
        {
          "name": "dateTo",
          "type": "datetime",
          "description": "End date or date and time of operation."
        },
        {
          "name": "status",
          "type": "string",
          "description": "Operation status, can be one of SUCCESSFUL, FAILED, EXECUTING or PENDING.",
          "validationSet": [
            "PENDING",
            "EXECUTING",
            "SUCCESSFUL",
            "FAILED"
          ]
        },
        {
          "name": "revert",
          "type": "boolean",
          "description": "Sort operations newest to oldest. Must be used with dateFrom and/or dateTo parameters"
        }
      ]
    }
  ]
}