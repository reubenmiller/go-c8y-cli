{
  "information": {
    "name": "binaries",
    "description": "Cumulocity binaries",
    "descriptionLong": "REST endpoint to interact with Cumulocity binaries",
    "link": "https://cumulocity.com/guides/reference/binaries/"
  },
  "endpoints": [
    {
      "name": "getBinaryCollection",
      "description": "Get binary collection",
      "descriptionLong": "Get a collection of inventory binaries. The results include the meta information about binary and not the binary itself.\n",
      "method": "GET",
      "path": "/inventory/binaries",
      "accept": "application/vnd.com.nsn.cumulocity.managedObjectCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "collectionProperty": "managedObjects",
      "alias": {
        "go": "list",
        "powershell": "Get-BinaryCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a list of binaries",
            "beforeEach": [
              "$File = New-TestFile",
              "$Binary = PSc8y\\New-Binary -File $File"
            ],
            "command": "Get-BinaryCollection -PageSize 100",
            "afterEach": [
              "PSc8y\\Remove-Binary -Id $Binary.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a list of binaries",
            "command": "c8y binaries list --pageSize 100"
          },
          {
            "description": "Get a list of binaries with the type package_debian",
            "command": "c8y binaries list --type package_debian"
          }
        ]
      },
      "queryParameters": [
        {
          "name": "ids",
          "type": "[]stringcsv",
          "property": "ids",
          "description": "The managed object IDs to search for."
        },
        {
          "name": "type",
          "type": "string",
          "pipeline": true,
          "pipelineAliases": [
            "type"
          ],
          "required": false,
          "description": "The type of managed object to search for."
        },
        {
          "name": "owner",
          "type": "string",
          "description": "Username of the owner of the managed objects."
        },
        {
          "name": "text",
          "type": "string",
          "description": "Search for managed objects where any property value is equal to the given one. Only string values are supported."
        },
        {
          "name": "childAdditionId",
          "type": "string",
          "description": "Search for a specific child addition and list all the groups to which it belongs."
        },
        {
          "name": "childAssetId",
          "type": "string",
          "description": "Search for a specific child asset and list all the groups to which it belongs."
        },
        {
          "name": "childDeviceId",
          "type": "[]device",
          "description": "Search for a specific child device and list all the groups to which it belongs."
        }
      ]
    },
    {
      "name": "download",
      "description": "Download binary",
      "descriptionLong": "Download a binary stored in Cumulocity and display it on the console. \n\nFor non text based binaries or if the output should be saved to file, the output parameter should be used to write the file directly to a local file.\n",
      "method": "GET",
      "path": "/inventory/binaries/{id}",
      "accept": "*/*",
      "alias": {
        "go": "get",
        "powershell": "Get-Binary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a binary and display the contents on the console",
            "beforeEach": [
              "$File = New-TestFile",
              "$Binary = PSc8y\\New-Binary -File $File"
            ],
            "command": "Get-Binary -Id $Binary.id",
            "afterEach": [
              "PSc8y\\Remove-Binary -Id $Binary.id"
            ]
          },
          {
            "description": "Get a binary and save it to a file",
            "beforeEach": [
              "$File = New-TestFile",
              "$Binary = PSc8y\\New-Binary -File $File"
            ],
            "command": "Get-Binary -Id $Binary.id -OutputFileRaw ./download-binary1.txt",
            "afterEach": [
              "if (Test-Path \"./download-binary1.txt\") { Remove-Item ./download-binary1.txt }",
              "Remove-Item $File",
              "PSc8y\\Remove-Binary -Id $Binary.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a binary and display the contents on the console",
            "command": "c8y binaries get --id 12345"
          },
          {
            "description": "Get a binary and save it to a file",
            "command": "c8y binaries get --id 12345 --outputFileRaw \"./download-binary1.txt\""
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Inventory binary id"
        }
      ]
    },
    {
      "name": "newBinary",
      "description": "Create binary",
      "descriptionLong": "Create/upload a new binary to Cumulocity",
      "method": "POST",
      "path": "/inventory/binaries",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "create",
        "powershell": "New-Binary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Upload a log file",
            "beforeEach": [
              "$File = New-TestFile",
              "$FileName = (Get-Item $File).Name"
            ],
            "command": "New-Binary -File $File",
            "afterEach": [
              "Remove-Item $File",
              "Find-ManagedObjectCollection -Query \"has(c8y_IsBinary) and (name eq '$FileName')\" | Remove-Binary"
            ]
          },
          {
            "description": "Upload a config file and make it globally accessible for all users",
            "beforeEach": [
              "$File = New-TestFile",
              "$FileName = (Get-Item $File).Name"
            ],
            "command": "New-Binary -File $File -Type \"c8y_upload\" -Data @{ c8y_Global = @{} }",
            "afterEach": [
              "Remove-Item $File",
              "Find-ManagedObjectCollection -Query \"has(c8y_IsBinary) and (name eq '$FileName')\" | Remove-Binary"
            ]
          }
        ],
        "go": [
          {
            "description": "Upload a log file",
            "command": "c8y binaries create --file ./myfile.log"
          },
          {
            "description": "Upload a config file and make it globally accessible for all users",
            "command": "c8y binaries create --file \"myConfig.json\" --type c8y_upload --data \"c8y_Global={}\""
          },
          {
            "description": "Upload a file with a custom name and custom meta information",
            "skipTest": true,
            "command": "c8y binaries create --file \"myConfig.json\" --file \"device01-myConfig.json\" --type c8y_upload --template \"{collectedAt: _.Now('-5min')}\"\n"
          }
        ]
      },
      "bodyContent": {
        "type": "formdata"
      },
      "body": [
        {
          "name": "file",
          "type": "file",
          "required": true,
          "description": "File to be uploaded as a binary"
        },
        {
          "name": "name",
          "type": "string",
          "description": "Set the name of the binary file. This will be the name of the file when it is downloaded in the UI"
        },
        {
          "name": "type",
          "type": "string",
          "required": false,
          "description": "Custom type. If left blank, the MIME type will be detected from the file extension"
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties to be added to the binary."
        }
      ]
    },
    {
      "name": "updateBinary",
      "description": "Update binary",
      "descriptionLong": "Update an existing binary\n",
      "method": "PUT",
      "path": "/inventory/binaries/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "update",
        "powershell": "Update-Binary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Update an existing binary file",
            "beforeEach": [
              "$File1 = New-TestFile",
              "$File2 = New-TestFile",
              "$Binary1 = New-Binary -File $File1",
              "$FileName1 = (Get-Item $File1).Name"
            ],
            "command": "Update-Binary -Id $Binary1.id -File $File2",
            "afterEach": [
              "Remove-Item $File1",
              "Remove-Item $File2",
              "Find-ManagedObjectCollection -Query \"has(c8y_IsBinary) and (name eq '$FileName1')\" | Remove-Binary"
            ]
          }
        ],
        "go": [
          {
            "description": "Update an existing binary file",
            "command": "c8y binaries update --id 12345 --file ./myfile.log"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Inventory binary id"
        }
      ],
      "bodyTemplate": {
        "type": "none"
      },
      "bodyContent": {
        "type": "formdata"
      },
      "body": [
        {
          "name": "file",
          "type": "file",
          "required": true,
          "description": "File to be uploaded as a binary"
        }
      ]
    },
    {
      "name": "deleteBinary",
      "description": "Delete binary",
      "descriptionLong": "Delete a binary from the tenant. This delete operation can not be undone.",
      "method": "DELETE",
      "path": "/inventory/binaries/{id}",
      "alias": {
        "go": "delete",
        "powershell": "Remove-Binary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Delete a binary",
            "beforeEach": [
              "$File = New-TestFile",
              "$Binary = New-Binary -File $File"
            ],
            "command": "Remove-Binary -Id $Binary.id",
            "afterEach": [
              "Remove-Item $File"
            ]
          }
        ],
        "go": [
          {
            "description": "Delete a binary",
            "command": "c8y binaries delete --id 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Inventory binary id"
        }
      ]
    }
  ]
}
