{
  "information": {
    "name": "devices",
    "description": "Cumulocity devices",
    "descriptionLong": "REST endpoint to interact with Cumulocity devices",
    "link": "https://cumulocity.com/guides/reference/inventory/"
  },
  "endpoints": [
    {
      "name": "getDevice",
      "description": "Get device",
      "descriptionLong": "Get an existing device",
      "method": "GET",
      "path": "inventory/managedObjects/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.customDevice+json",
      "alias": {
        "go": "get",
        "powershell": "Get-Device"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get device by id",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice"
            ],
            "command": "Get-Device -Id $device.id",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          },
          {
            "description": "Get device by name",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice"
            ],
            "command": "Get-Device -Id $device.name",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get device by id",
            "command": "c8y devices get --id 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]device",
          "pipeline": true,
          "required": true,
          "description": "Device ID"
        }
      ]
    },
    {
      "name": "updateDevice",
      "description": "Update device",
      "descriptionLong": "Update properties of an existing device",
      "method": "PUT",
      "path": "inventory/managedObjects/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.customDevice+json",
      "alias": {
        "go": "update",
        "powershell": "Update-Device"
      },
      "examples": {
        "powershell": [
          {
            "description": "Update device by id",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice"
            ],
            "command": "Update-Device -Id $device.id -NewName \"MyNewName\"",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          },
          {
            "description": "Update device by name",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice"
            ],
            "command": "Update-Device -Id $device.name -NewName \"MyNewName\"",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          },
          {
            "description": "Update device custom properties",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice"
            ],
            "command": "Update-Device -Id $device.name -Data @{ \"myValue\" = @{ value1 = $true } }",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Update device by id",
            "command": "c8y devices update --id 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]device",
          "pipeline": true,
          "required": true,
          "description": "Device ID"
        }
      ],
      "body": [
        {
          "name": "newName",
          "type": "string",
          "property": "name",
          "required": false,
          "description": "Device name"
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties of the inventory."
        }
      ]
    },
    {
      "name": "deleteDevice",
      "description": "Delete device",
      "descriptionLong": "Delete an existing device by id or name. Deleting the object will remove all of its data (i.e. alarms, events, operations and measurements)\n",
      "method": "DELETE",
      "path": "inventory/managedObjects/{id}",
      "accept": "",
      "alias": {
        "go": "delete",
        "powershell": "Remove-Device"
      },
      "examples": {
        "powershell": [
          {
            "description": "Remove device by id",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice"
            ],
            "command": "Remove-Device -Id $device.id"
          },
          {
            "description": "Remove device by name",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice"
            ],
            "command": "Remove-Device -Id $device.name"
          },
          {
            "description": "Delete device and related device user/credentials",
            "skipTest": true,
            "command": "Remove-Device -Id \"device01\" -WithDeviceUser"
          }
        ],
        "go": [
          {
            "description": "Get device by id",
            "command": "c8y devices delete --id 12345"
          },
          {
            "description": "Get device by name",
            "command": "c8y devices delete --id device01",
            "assertStdOut": {
              "json": {
                "path": "r//inventory/managedObjects/\\d+$"
              }
            }
          },
          {
            "description": "Delete device and related device user/credentials",
            "command": "c8y devices delete --id 12345 --withDeviceUser",
            "assertStdOut": {
              "json": {
                "method": "DELETE",
                "path": "/inventory/managedObjects/12345",
                "query": "withDeviceUser=true"
              }
            }
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]device",
          "pipeline": true,
          "required": true,
          "description": "Device ID",
          "position": 10
        }
      ],
      "queryParameters": [
        {
          "name": "withDeviceUser",
          "type": "boolean",
          "description": "Delete associated device owner",
          "position": 11
        },
        {
          "name": "cascade",
          "type": "boolean",
          "description": "Remove all child devices and child assets will be deleted recursively. By default, the delete operation is propagated to the subgroups only if the deleted object is a group",
          "position": 20
        }
      ]
    },
    {
      "name": "createDevice",
      "description": "Create device",
      "descriptionLong": "Create a device (managed object) with the special c8y_IsDevice fragment.\n",
      "method": "POST",
      "path": "inventory/managedObjects",
      "accept": "application/vnd.com.nsn.cumulocity.customDevice+json",
      "alias": {
        "go": "create",
        "powershell": "New-Device"
      },
      "examples": {
        "powershell": [
          {
            "description": "Create device",
            "beforeEach": [
              "$DeviceName = PSc8y\\New-RandomString -Prefix \"myDevice\""
            ],
            "command": "New-Device -Name $DeviceName",
            "afterEach": [
              "Remove-Device -Id $DeviceName"
            ]
          },
          {
            "description": "Create device with custom properties",
            "beforeEach": [
              "$DeviceName = PSc8y\\New-RandomString -Prefix \"myDevice\""
            ],
            "command": "New-Device -Name $DeviceName -Data @{ myValue = @{ value1 = $true } }",
            "afterEach": [
              "Remove-Device -Id $DeviceName"
            ]
          },
          {
            "description": "Create device using a template",
            "beforeEach": [
              "$DeviceName = PSc8y\\New-RandomString -Prefix \"myDevice\""
            ],
            "command": "New-Device -Template \"{ name: '$DeviceName' }\"\n",
            "afterEach": [
              "Remove-Device -Id $DeviceName"
            ]
          }
        ],
        "go": [
          {
            "description": "Create device",
            "command": "c8y devices create --name myDevice"
          },
          {
            "description": "Create device with custom properties",
            "command": "c8y devices create --name myDevice --data \"custom_value1=1234\""
          }
        ]
      },
      "bodyTemplate": {
        "type": "jsonnet",
        "applyLast": true,
        "template": "{c8y_IsDevice: {}}"
      },
      "body": [
        {
          "name": "name",
          "type": "string",
          "required": false,
          "pipeline": true,
          "description": "Device name",
          "pipelineAliases": [
            "name"
          ]
        },
        {
          "name": "type",
          "description": "Device type",
          "type": "string"
        },
        {
          "name": "data",
          "type": "json",
          "description": "Custom device properties."
        }
      ],
      "bodyRequiredKeys": [
        "name"
      ]
    },
    {
      "name": "getSupportedMeasurements",
      "description": "Get supported measurements",
      "descriptionLong": "Returns a list of fragments (valueFragmentTypes) related to the device\n",
      "method": "GET",
      "path": "inventory/managedObjects/{device}/supportedMeasurements",
      "accept": "application/vnd.com.nsn.cumulocity.inventory+json",
      "collectionProperty": "-",
      "alias": {
        "go": "getSupportedMeasurements",
        "powershell": "Get-SupportedMeasurements"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get the supported measurements of a device by name",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice",
              "$Measurement = PSc8y\\New-Measurement -Template \"test.measurement.jsonnet\" -Device $device.id"
            ],
            "command": "Get-SupportedMeasurements -Device $device.id",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          },
          {
            "description": "Get the supported measurements of a device (using pipeline)",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice",
              "$Measurement = PSc8y\\New-Measurement -Template \"test.measurement.jsonnet\" -Device $device.id"
            ],
            "command": "Get-SupportedMeasurements -Device $device.id",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get the supported measurements of a device by name",
            "command": "c8y devices getSupportedMeasurements --device 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "device",
          "type": "[]device",
          "pipeline": true,
          "required": true,
          "description": "Device ID"
        }
      ]
    },
    {
      "name": "getSupportedSeries",
      "description": "Get supported measurement series",
      "descriptionLong": "Get supported measurement series/s of a device\n",
      "method": "GET",
      "path": "inventory/managedObjects/{device}/supportedSeries",
      "accept": "application/vnd.com.nsn.cumulocity.inventory+json",
      "collectionProperty": "-",
      "alias": {
        "go": "getSupportedSeries",
        "powershell": "Get-SupportedSeries"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get the supported measurement series of a device by name",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice",
              "$Measurement = PSc8y\\New-Measurement -Template \"test.measurement.jsonnet\" -Device $device.id"
            ],
            "command": "Get-SupportedSeries -Device $device.id",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          },
          {
            "description": "Get the supported measurement series of a device (using pipeline)",
            "beforeEach": [
              "$device = PSc8y\\New-TestDevice",
              "$Measurement = PSc8y\\New-Measurement -Template \"test.measurement.jsonnet\" -Device $device.id"
            ],
            "command": "Get-SupportedSeries -Device $device.id",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get the supported measurement series of a device by name",
            "command": "c8y devices getSupportedSeries --device 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "device",
          "type": "[]device",
          "pipeline": true,
          "required": true,
          "description": "Device ID"
        }
      ]
    },
    {
      "name": "newManagedObjectChildDevice",
      "method": "POST",
      "path": "inventory/managedObjects/{device}/childDevices",
      "accept": "application/vnd.com.nsn.cumulocity.managedObjectReference+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "description": "Assign child device",
      "descriptionLong": "Create a child device reference",
      "collectionProperty": "managedObject",
      "alias": {
        "go": "assignChild",
        "powershell": "Add-ChildDeviceToDevice"
      },
      "examples": {
        "powershell": [
          {
            "description": "Assign a device as a child device to an existing device",
            "beforeEach": [
              "$Device = PSc8y\\New-TestDevice",
              "$ChildDevice = PSc8y\\New-TestDevice"
            ],
            "command": "Add-ChildDeviceToDevice -Device $Device.id -NewChild $ChildDevice.id",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $ChildDevice.id",
              "PSc8y\\Remove-ManagedObject -Id $Device.id"
            ]
          },
          {
            "description": "Assign a device as a child device to an existing device (using pipeline)",
            "beforeEach": [
              "$Device = PSc8y\\New-TestDevice",
              "$ChildDevice = PSc8y\\New-TestDevice"
            ],
            "command": "Get-ManagedObject -Id $ChildDevice.id | Add-ChildDeviceToDevice -Device $Device.id",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $Device.id",
              "PSc8y\\Remove-ManagedObject -Id $ChildDevice.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Assign a device as a child device to an existing device",
            "command": "c8y devices assignChild --device 12345 --newChild 44235"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "device",
          "type": "[]device",
          "required": true,
          "description": "Device."
        }
      ],
      "body": [
        {
          "name": "newChild",
          "type": "[]device",
          "required": true,
          "pipeline": true,
          "property": "managedObject.id",
          "description": "New child device"
        }
      ]
    },
    {
      "name": "deleteManagedObjectChildDeviceReference",
      "description": "Delete child device reference",
      "descriptionLong": "Delete child device reference",
      "method": "DELETE",
      "path": "inventory/managedObjects/{device}/childDevices/{childDevice}",
      "accept": "",
      "alias": {
        "go": "unassignChild",
        "powershell": "Remove-ChildDeviceFromDevice"
      },
      "examples": {
        "powershell": [
          {
            "description": "Unassign a child device from its parent device",
            "beforeEach": [
              "$Device = PSc8y\\New-TestDevice",
              "$ChildDevice = PSc8y\\New-TestDevice",
              "PSc8y\\Add-ChildDeviceToDevice -Device $Device.id -NewChild $ChildDevice.id"
            ],
            "command": "Remove-ChildDeviceFromDevice -Device $Device.id -ChildDevice $ChildDevice.id",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $ChildDevice.id",
              "PSc8y\\Remove-ManagedObject -Id $Device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Unassign a child device from its parent device",
            "command": "c8y devices unassignChild --device 12345 --childDevice 22553"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "device",
          "type": "[]device",
          "required": true,
          "description": "ManagedObject id"
        },
        {
          "name": "childDevice",
          "type": "[]device",
          "required": true,
          "pipeline": true,
          "description": "Child device reference"
        }
      ]
    },
    {
      "name": "getManagedObjectChildDeviceCollection",
      "method": "GET",
      "description": "Get child device collection",
      "descriptionLong": "Get a collection of managedObjects child references",
      "path": "inventory/managedObjects/{device}/childDevices",
      "accept": "application/vnd.com.nsn.cumulocity.managedObjectReferenceCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "collectionProperty": "references.#.managedObject",
      "alias": {
        "go": "listChildren",
        "powershell": "Get-ChildDeviceCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a list of the child devices of an existing device",
            "beforeEach": [
              "$Device = PSc8y\\New-TestDevice",
              "$ChildDevice = PSc8y\\New-TestDevice",
              "PSc8y\\Add-ChildDeviceToDevice -Device $Device.id -NewChild $ChildDevice.id"
            ],
            "command": "Get-ChildDeviceCollection -Device $Device.id",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $Device.id",
              "PSc8y\\Remove-ManagedObject -Id $ChildDevice.id"
            ]
          },
          {
            "description": "Get a list of the child devices of an existing device (using pipeline)",
            "beforeEach": [
              "$Device = PSc8y\\New-TestDevice",
              "$ChildDevice = PSc8y\\New-TestDevice",
              "PSc8y\\Add-ChildDeviceToDevice -Device $Device.id -NewChild $ChildDevice.id"
            ],
            "command": "Get-ManagedObject -Id $Device.id | Get-ChildDeviceCollection",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $Device.id",
              "PSc8y\\Remove-ManagedObject -Id $ChildDevice.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a list of the child devices of an existing device",
            "command": "c8y devices listChildren --device 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "device",
          "type": "[]device",
          "pipeline": true,
          "required": true,
          "description": "Device."
        },
        {
          "name": "withChildren",
          "type": "boolean",
          "description": "Determines if children with ID and name should be returned when fetching the managed object. Set it to false to improve query performance."
        }
      ]
    },
    {
      "name": "getManagedObjectChildDeviceReference",
      "description": "Get child device reference",
      "descriptionLong": "Get managed object child device reference",
      "method": "GET",
      "path": "inventory/managedObjects/{device}/childDevices/{reference}",
      "accept": "application/vnd.com.nsn.cumulocity.managedObjectReference+json",
      "alias": {
        "go": "getChild",
        "powershell": "Get-ChildDeviceReference"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get an existing child device reference",
            "beforeEach": [
              "$Agent = New-TestAgent",
              "$Device = New-TestDevice",
              "$Ref = Add-ChildDeviceToDevice -Device $Agent.id -NewChild $Device.id"
            ],
            "command": "Get-ChildDeviceReference -Device $Agent.id -Reference $Ref.id",
            "afterEach": [
              "Remove-ManagedObject -Id $Device.id",
              "Remove-ManagedObject -Id $Agent.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get an existing child device reference",
            "command": "c8y devices getChild --device 12345 --reference 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "device",
          "type": "[]device",
          "pipeline": true,
          "required": true,
          "description": "ManagedObject id"
        },
        {
          "name": "reference",
          "type": "[]device",
          "required": true,
          "description": "Device reference id"
        }
      ]
    },
    {
      "name": "listChildAssetCollection",
      "method": "GET",
      "description": "Get child asset collection",
      "descriptionLong": "Get a collection of managedObjects child references",
      "path": "inventory/managedObjects/{id}/childAssets",
      "accept": "application/vnd.com.nsn.cumulocity.managedObjectReferenceCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "collectionProperty": "references.#.managedObject",
      "alias": {
        "go": "listAssets",
        "powershell": "Get-DeviceChildAssetCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a list of the child assets of an existing device",
            "beforeEach": [
              "$Device = PSc8y\\New-TestDevice",
              "$ChildDevice = PSc8y\\New-TestDevice",
              "PSc8y\\Add-AssetToGroup -Group $Device.id -NewChildDevice $ChildDevice.id"
            ],
            "command": "Get-DeviceChildAssetCollection -Id $Group.id",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $ChildDevice.id",
              "PSc8y\\Remove-ManagedObject -Id $Device.id"
            ]
          },
          {
            "description": "Get a list of the child assets of an existing group",
            "beforeEach": [
              "$Group = PSc8y\\New-TestDeviceGroup",
              "$ChildGroup = PSc8y\\New-TestDeviceGroup",
              "PSc8y\\Add-AssetToGroup -Group $Group.id -NewChildGroup $ChildGroup.id"
            ],
            "command": "Get-DeviceChildAssetCollection -Id $Group.id",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $ChildGroup.id",
              "PSc8y\\Remove-ManagedObject -Id $Group.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a list of the child devices of an existing device",
            "command": "c8y devices listAssets --id 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]device",
          "pipeline": true,
          "required": true,
          "description": "Device."
        }
      ]
    }
  ]
}
