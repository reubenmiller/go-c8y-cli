{
  "information": {
    "name": "firmware/versions",
    "description": "Cumulocity firmware version management",
    "descriptionLong": "Firmware version management to create/list/delete versions",
    "link": "https://cumulocity.com/guides/users-guide/device-management/#firmware-repo"
  },
  "endpoints": [
    {
      "name": "getFirmwareVersionCollection",
      "method": "GET",
      "description": "Get firmware package version collection",
      "descriptionLong": "Get a collection of firmware package versions (managedObjects) based on filter parameters",
      "path": "inventory/managedObjects",
      "accept": "application/vnd.com.nsn.cumulocity.managedObjectCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "collectionProperty": "managedObjects",
      "alias": {
        "go": "list",
        "powershell": "Get-FirmwareVersionCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a list of firmware package versions",
            "beforeEach": [
              "$name = New-RandomString -Prefix \"firmware_\"",
              "$firmware = New-Firmware -Name $name",
              "$firmwareVersion = PSc8y\\New-FirmwareVersion -Firmware $firmware.id -Version \"1.0.0\" -Url \"https://blob.azure.com/device-firmare/1.0.0/image.mender\""
            ],
            "command": "Get-FirmwareVersionCollection -Firmware $firmware.id",
            "afterEach": [
              "Remove-Firmware -Id $firmware.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a list of firmware package versions",
            "command": "c8y firmware versions list --firmware 12345",
            "assertStdOut": {
              "json": {
                "query": "r/bygroupid\\(12345\\)"
              },
              "contains": [
                "bygroupid(12345)"
              ]
            }
          },
          {
            "description": "Get a list of firmware and their versions (using pipeline)",
            "command": "c8y firmware list | c8y firmware versions list",
            "skipTest": true
          },
          {
            "description": "Get all versions of a firmware using an existing version object",
            "command": "c8y firmware versions get --id 12345 | c8y firmware versions list",
            "skipTest": true
          }
        ]
      },
      "queryParameters": [
        {
          "name": "query",
          "description": "Query expression group",
          "property": "query",
          "type": "queryExpression",
          "children": [
            {
              "name": "query",
              "type": "string",
              "description": "Additional query filter",
              "format": "%s"
            },
            {
              "name": "queryTemplate",
              "type": "string",
              "description": "String template to be used when applying the given query. Use %s to reference the query/pipeline input"
            },
            {
              "name": "orderBy",
              "type": "string",
              "description": "Order by. e.g. _id asc or name asc or creationTime.date desc",
              "default": "creationTime.date desc"
            },
            {
              "name": "firmware",
              "type": "[]firmware",
              "description": "Firmware package id or name",
              "format": "bygroupid(%s)",
              "required": true,
              "pipeline": true,
              "pipelineAliases": [
                "additionParents.references.0.managedObject.id",
                "id"
              ]
            },
            {
              "name": "ignorePatches",
              "type": "stringStatic",
              "description": "",
              "value": "not(has(c8y_Patch))"
            },
            {
              "name": "version",
              "type": "string",
              "description": "Filter by version",
              "format": "(c8y_Firmware.version eq '%s')"
            },
            {
              "name": "url",
              "type": "string",
              "description": "Filter by url",
              "format": "(c8y_Firmware.url eq '%s')"
            }
          ]
        },
        {
          "name": "skipChildrenNames",
          "type": "boolean",
          "description": "Don't include the child devices names in the response. This can improve the API response because the names don't need to be retrieved"
        },
        {
          "name": "withChildren",
          "type": "boolean",
          "description": "Determines if children with ID and name should be returned when fetching the managed object. Set it to false to improve query performance."
        },
        {
          "name": "withChildrenCount",
          "type": "boolean",
          "description": "When set to true, the returned result will contain the total number of children in the respective objects (childAdditions, childAssets and childDevices)"
        },
        {
          "name": "withGroups",
          "type": "boolean",
          "description": "When set to true it returns additional information about the groups to which the searched managed object belongs. This results in setting the assetParents property with additional information about the groups."
        },
        {
          "name": "withParents",
          "type": "booleanDefault",
          "description": "Include parent references",
          "default": "true"
        }
      ]
    },
    {
      "name": "getFirmwareVersion",
      "description": "Get firmware package version",
      "descriptionLong": "Get an existing firmware package version",
      "method": "GET",
      "path": "inventory/managedObjects/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "get",
        "powershell": "Get-FirmwareVersion"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a firmware package",
            "beforeEach": [
              "$mo = PSc8y\\New-ManagedObject -Name \"testMO\""
            ],
            "command": "Get-FirmwareVersion -Id $mo.id",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          },
          {
            "description": "Get a firmware package (using pipeline)",
            "command": "Get-ManagedObject -Id $mo.id | Get-FirmwareVersion",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a firmware package version using name",
            "command": "c8y firmware versions get --firmware 11111 --id 1.0.0",
            "skipTest": true
          },
          {
            "description": "Get a firmware package version using pipeline",
            "command": "c8y firmware versions list --firmware 12345 | c8y firmware versions get --withParents",
            "skipTest": true
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]firmwareversion",
          "dependsOn": [
            "firmware"
          ],
          "pipeline": true,
          "required": true,
          "description": "Firmware Package version id or name"
        },
        {
          "name": "firmware",
          "type": "[]firmware",
          "required": false,
          "description": "Firmware package id or name (used to help completion be more accurate)"
        }
      ],
      "queryParameters": [
        {
          "name": "withParents",
          "type": "boolean",
          "description": "Include parent references"
        }
      ]
    },
    {
      "name": "deleteFirmwareVersion",
      "description": "Delete firmware package version",
      "descriptionLong": "Delete an existing firmware package version",
      "method": "DELETE",
      "path": "inventory/managedObjects/{id}",
      "accept": "",
      "alias": {
        "go": "delete",
        "powershell": "Remove-FirmwareVersion"
      },
      "examples": {
        "powershell": [
          {
            "description": "Delete a firmware version and all related versions",
            "beforeEach": [
              "$mo = PSc8y\\New-ManagedObject -Name \"testMO\""
            ],
            "command": "Remove-FirmwareVersion -Id $mo.id",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          },
          {
            "description": "Delete a firmware package (using pipeline)",
            "beforeEach": [
              "$mo = PSc8y\\New-ManagedObject -Name \"testMO\""
            ],
            "command": "Get-ManagedObject -Id $mo.id | Remove-FirmwareVersion",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          }
        ],
        "go": [
          {
            "description": "Delete a firmware package and all related versions",
            "command": "c8y firmware versions delete --id 12345"
          },
          {
            "description": "Delete a firmware package (but keep any child binaries)",
            "command": "c8y firmware versions delete --id 12345 --forceCascade=false"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]firmwareversion",
          "dependsOn": [
            "firmware"
          ],
          "pipeline": true,
          "required": true,
          "description": "Firmware Package version id or name"
        },
        {
          "name": "firmware",
          "type": "[]firmware",
          "required": false,
          "description": "Firmware package id or name (used to help completion be more accurate)"
        }
      ],
      "queryParameters": [
        {
          "name": "forceCascade",
          "type": "booleanDefault",
          "default": "true",
          "description": "Remove version and any related binaries"
        }
      ]
    },
    {
      "name": "download",
      "skip": true,
      "description": "Download firmware version binary",
      "descriptionLong": "Download a binary stored in Cumulocity and display it on the console.\n\nFor non text based binaries or if the output should be saved to file, the output parameter should be used to write the file directly to a local file.\n",
      "method": "GET",
      "path": "{url}",
      "accept": "*/*",
      "alias": {
        "go": "download",
        "powershell": "Get-FirmwareVersionBinary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a binary and display the contents on the console",
            "command": "Get-Binary -Id $Binary.id",
            "skipTest": true
          },
          {
            "description": "Get a binary and save it to a file",
            "command": "Get-Binary -Id $Binary.id -OutputFileRaw ./download-binary1.txt",
            "skipTest": true
          }
        ],
        "go": [
          {
            "description": "Download Get a binary and display the contents on the console",
            "command": "c8y firmware versions download --url /inventory/binaries/12345",
            "skipTest": true
          },
          {
            "description": "Get a binary and save it to a file",
            "command": "c8y firmware versions get --id 12345 | c8y firmware versions download --outputFileRaw \"./download-binary1.txt\"",
            "skipTest": true
          }
        ]
      },
      "pathParameters": [
        {
          "name": "url",
          "type": "[]string",
          "required": true,
          "pipeline": true,
          "description": "Firmware url",
          "pipelineAliases": [
            "c8y_Firmware.url"
          ]
        }
      ]
    },
    {
      "name": "installVersion",
      "description": "Install firmware version on a device",
      "descriptionLong": "Install firmware version on a device",
      "method": "POST",
      "path": "devicecontrol/operations",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "install",
        "powershell": "Install-FirmwareVersion"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a firmware version",
            "skipTest": true,
            "command": "Install-FirmwareVersion -Device $mo.id -Firmware linux-iot -Version 1.0.0"
          }
        ],
        "go": [
          {
            "description": "Install a firmware version (lookup url automatically).\nIf the firmware/version exists in the firmware repository, then it will add the url automatically\n",
            "command": "c8y firmware versions install --device 1234 --firmware linux-iot --version 1.0.0",
            "skipTest": true
          },
          {
            "description": "Install a firmware version with an explicit url",
            "command": "c8y firmware versions install --device 1234 --firmware linux-iot --version 1.0.0 --url \"https://my.blobstore.com/linux-iot.tar.gz\""
          }
        ]
      },
      "body": [
        {
          "name": "device",
          "type": "[]device",
          "property": "deviceId",
          "description": "Device or agent where the firmware should be installed",
          "pipeline": true
        },
        {
          "name": "firmware",
          "type": "firmwareName",
          "required": true,
          "property": "c8y_Firmware.name",
          "description": "Firmware name"
        },
        {
          "name": "version",
          "type": "firmwareVersionName",
          "dependsOn": [
            "firmware"
          ],
          "required": false,
          "property": "c8y_Firmware.version",
          "description": "Firmware version"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "property": "c8y_Firmware.url",
          "description": "Firmware url. Leave blank to automatically set it if a matching firmware/version is found in the c8y firmware repository"
        },
        {
          "name": "firmwareDetails",
          "type": "firmwareDetails",
          "position": 98,
          "property": "c8y_Firmware",
          "description": "Computed parameter which is filled in when the firmware details, name, version and url"
        },
        {
          "name": "description",
          "type": "string",
          "description": "Operation description"
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties describing the operation which will be performed on the device."
        }
      ],
      "bodyRequiredKeys": [
        "deviceId",
        "c8y_Firmware.name",
        "c8y_Firmware.version"
      ],
      "bodyTemplate": {
        "type": "jsonnet",
        "template": "{\n  _version:: if std.objectHas(self.c8y_Firmware, 'version') then self.c8y_Firmware.version else '',\n  description:\n    ('Update firmware to: \"%s\"' % self.c8y_Firmware.name)\n    + (if self._version != \"\" then \" (%s)\" % self._version else \"\")\n}\n"
      }
    }
  ]
}
