{
  "information": {
    "name": "smartgroups",
    "description": "Cumulocity smart groups",
    "descriptionLong": "REST endpoint to interact with Cumulocity smart groups. A smart group is an inventory managed object and can also be managed via the Inventory api.",
    "link": "https://cumulocity.com/guides/reference/inventory/"
  },
  "endpoints": [
    {
      "name": "getSmartGroup",
      "description": "Get smart group",
      "descriptionLong": "Get an smart group",
      "method": "GET",
      "path": "inventory/managedObjects/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "get",
        "powershell": "Get-SmartGroup"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get smart group by id",
            "beforeEach": [
              "$smartgroup = PSc8y\\New-TestSmartGroup"
            ],
            "command": "Get-SmartGroup -Id $smartgroup.id",
            "afterEach": [
              "Remove-ManagedObject -Id $smartgroup.id"
            ]
          },
          {
            "description": "Get smart group by name",
            "beforeEach": [
              "$smartgroup = PSc8y\\New-TestSmartGroup"
            ],
            "command": "Get-SmartGroup -Id $smartgroup.name",
            "afterEach": [
              "Remove-ManagedObject -Id $smartgroup.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get smart group by id",
            "command": "c8y smartgroups get --id 12345"
          },
          {
            "description": "Get smart group by name",
            "command": "c8y smartgroups get --id \"my smartgroup\"",
            "assertStdOut": {
              "json": {
                "path": "r//inventory/managedObjects/\\d+$"
              }
            }
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]smartgroup",
          "pipeline": true,
          "required": true,
          "description": "Smart group ID"
        }
      ],
      "queryParameters": [
        {
          "name": "skipChildrenNames",
          "type": "boolean",
          "description": "Don't include the child devices names in the response. This can improve the API response because the names don't need to be retrieved"
        },
        {
          "name": "withChildren",
          "type": "boolean",
          "description": "Determines if children with ID and name should be returned when fetching the managed object. Set it to false to improve query performance."
        },
        {
          "name": "withChildrenCount",
          "type": "boolean",
          "description": "When set to true, the returned result will contain the total number of children in the respective objects (childAdditions, childAssets and childDevices)"
        },
        {
          "name": "withGroups",
          "type": "boolean",
          "description": "When set to true it returns additional information about the groups to which the searched managed object belongs. This results in setting the assetParents property with additional information about the groups."
        },
        {
          "name": "withParents",
          "type": "boolean",
          "description": "Include a flat list of all parents and grandparents of the given object"
        }
      ]
    },
    {
      "name": "updateSmartGroup",
      "description": "Update smart group",
      "descriptionLong": "Update properties of an existing smart group",
      "method": "PUT",
      "path": "inventory/managedObjects/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.inventory+json",
      "alias": {
        "go": "update",
        "powershell": "Update-SmartGroup"
      },
      "examples": {
        "powershell": [
          {
            "description": "Update smart group by id",
            "beforeEach": [
              "$smartgroup = PSc8y\\New-TestSmartGroup"
            ],
            "command": "Update-SmartGroup -Id $smartgroup.id -NewName \"MyNewName\"",
            "afterEach": [
              "Remove-ManagedObject -Id $smartgroup.id"
            ]
          },
          {
            "description": "Update smart group by name",
            "beforeEach": [
              "$smartgroup = PSc8y\\New-TestSmartGroup"
            ],
            "command": "Update-SmartGroup -Id $smartgroup.name -NewName \"MyNewName\"",
            "afterEach": [
              "Remove-ManagedObject -Id $smartgroup.id"
            ]
          },
          {
            "description": "Update smart group custom properties",
            "beforeEach": [
              "$smartgroup = PSc8y\\New-TestSmartGroup"
            ],
            "command": "Update-SmartGroup -Id $smartgroup.name -Data @{ \"myValue\" = @{ value1 = $true } }",
            "afterEach": [
              "Remove-ManagedObject -Id $smartgroup.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Update smart group by id",
            "command": "c8y smartgroups update --id 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]smartgroup",
          "pipeline": true,
          "required": true,
          "description": "Smart group ID"
        }
      ],
      "body": [
        {
          "name": "newName",
          "type": "string",
          "property": "name",
          "required": false,
          "description": "New smart group name"
        },
        {
          "name": "query",
          "type": "string",
          "property": "c8y_DeviceQueryString",
          "required": false,
          "description": "New query"
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties of the smart group."
        }
      ]
    },
    {
      "name": "deleteSmartGroup",
      "description": "Delete smart group",
      "descriptionLong": "Delete an existing smart group by id or name. Deleting a smart group will not affect any of the devices related to it.\n",
      "method": "DELETE",
      "path": "inventory/managedObjects/{id}",
      "accept": "",
      "alias": {
        "go": "delete",
        "powershell": "Remove-SmartGroup"
      },
      "examples": {
        "powershell": [
          {
            "description": "Remove smart group by id",
            "beforeEach": [
              "$smartgroup = PSc8y\\New-TestSmartGroup"
            ],
            "command": "Remove-SmartGroup -Id $smartgroup.id"
          },
          {
            "description": "Remove smart group by name",
            "beforeEach": [
              "$smartgroup = PSc8y\\New-TestSmartGroup"
            ],
            "command": "Remove-SmartGroup -Id $smartgroup.name"
          }
        ],
        "go": [
          {
            "description": "Get smart group by id",
            "command": "c8y smartgroups delete --id 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]smartgroup",
          "pipeline": true,
          "required": true,
          "description": "Smart group ID",
          "position": 10
        }
      ]
    },
    {
      "name": "createSmartGroup",
      "description": "Create smart group",
      "descriptionLong": "Create a smart group (managed object) which groups devices by an inventory query.\n",
      "method": "POST",
      "path": "inventory/managedObjects",
      "accept": "application/vnd.com.nsn.cumulocity.inventory+json",
      "alias": {
        "go": "create",
        "powershell": "New-SmartGroup"
      },
      "examples": {
        "powershell": [
          {
            "description": "Create smart group (without a filter)",
            "beforeEach": [
              "$smartgroupName = PSc8y\\New-RandomString -Prefix \"mySmartGroup_createTests\""
            ],
            "command": "New-SmartGroup -Name $smartgroupName",
            "afterEach": [
              "Remove-SmartGroup -Id $smartgroupName"
            ]
          },
          {
            "description": "Create smart group with a device filter (filter by type and has a serial number)",
            "beforeEach": [
              "$smartgroupName = PSc8y\\New-RandomString -Prefix \"mySmartGroup_createTests\""
            ],
            "command": "New-SmartGroup -Name $smartgroupName -Query \"type eq 'IS*' and has(c8y_Hardware.serialNumber)\"",
            "afterEach": [
              "Remove-SmartGroup -Id $smartgroupName"
            ]
          },
          {
            "description": "Create a smart group which is not visible in the UI",
            "beforeEach": [
              "$smartgroupName = PSc8y\\New-RandomString -Prefix \"mySmartGroup_createTests\""
            ],
            "command": "New-SmartGroup -Name $smartgroupName -Query \"type eq 'IS*'\" -Invisible",
            "afterEach": [
              "Remove-SmartGroup -Id $smartgroupName"
            ]
          }
        ],
        "go": [
          {
            "description": "Create smart group (without a filter)",
            "command": "c8y smartgroups create --name mySmartGroup --query \"name eq 'my*'\""
          },
          {
            "description": "Create smart group with a device filter (filter by type and has a serial number)",
            "command": "c8y smartgroups create --name mySmartGroup --query \"type eq 'IS*' and has(c8y_Hardware.serialNumber)\""
          },
          {
            "description": "Create a smart group which is not visible in the UI",
            "command": "c8y smartgroups create --name mySmartGroup --query \"type eq 'IS*'\" --invisible"
          }
        ]
      },
      "bodyTemplate": {
        "type": "jsonnet",
        "applyLast": true,
        "template": "{type: 'c8y_DynamicGroup', c8y_DeviceQueryString: '', c8y_IsDynamicGroup: {}}"
      },
      "body": [
        {
          "name": "name",
          "type": "string",
          "required": false,
          "pipeline": false,
          "description": "Smart group name"
        },
        {
          "name": "query",
          "type": "string",
          "property": "c8y_DeviceQueryString",
          "required": false,
          "pipeline": true,
          "description": "Smart group query. Should be a valid inventory query. i.e. \\\"name eq 'myname' and has(myFragment)\\\""
        },
        {
          "name": "invisible",
          "type": "boolean",
          "value": "{}",
          "property": "c8y_IsDynamicGroup.invisible",
          "required": false,
          "description": "Should the smart group be hidden from the user interface"
        },
        {
          "name": "data",
          "type": "json",
          "description": "Custom smart group properties."
        }
      ],
      "bodyRequiredKeys": [
        "name",
        "c8y_DeviceQueryString"
      ]
    },
    {
      "name": "listSmartGroups",
      "method": "GET",
      "description": "List smart group collection",
      "descriptionLong": "Get a collection of smart groups based on filter parameters",
      "path": "inventory/managedObjects",
      "accept": "application/vnd.com.nsn.cumulocity.managedObjectCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "collectionProperty": "managedObjects",
      "alias": {
        "go": "list",
        "powershell": "Get-SmartGroupCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a list of smart groups",
            "beforeEach": [
              "$SmartGroup1 = New-TestSmartGroup"
            ],
            "command": "Get-SmartGroupCollection",
            "afterEach": [
              "Remove-ManagedObject -Id $SmartGroup1.id"
            ]
          },
          {
            "description": "Get a list of smart groups with the names starting with 'myText'",
            "beforeEach": [
              "$SmartGroup1 = New-TestSmartGroup",
              "$Name = $SmartGroup1.name"
            ],
            "command": "Get-SmartGroupCollection -Name \"$Name*\"",
            "afterEach": [
              "Remove-ManagedObject -Id $SmartGroup1.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a list of smart groups",
            "command": "c8y smartgroups list"
          },
          {
            "description": "Get a list of smart groups with the names starting with 'myText'",
            "command": "c8y smartgroups list --name \"myText*\"",
            "skipTest": true
          },
          {
            "description": "Get a list of smart groups with their names starting with 'myText', then get the devices from the smart groups",
            "command": "c8y smartgroups list --name \"myText*\" | c8y devices list",
            "skipTest": true
          }
        ]
      },
      "queryParameters": [
        {
          "name": "query",
          "description": "Query expression group",
          "property": "query",
          "type": "queryExpression",
          "children": [
            {
              "name": "query",
              "type": "string",
              "description": "Additional query filter",
              "format": "%s",
              "pipeline": true,
              "pipelineAliases": [
                "c8y_DeviceQueryString"
              ]
            },
            {
              "name": "queryTemplate",
              "type": "string",
              "description": "String template to be used when applying the given query. Use %s to reference the query/pipeline input"
            },
            {
              "name": "orderBy",
              "type": "string",
              "default": "name",
              "description": "Order by. e.g. _id asc or name asc or creationTime.date desc"
            },
            {
              "name": "smartgroup",
              "type": "stringStatic",
              "description": "",
              "value": "(type eq 'c8y_DynamicGroup')"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Filter by name",
              "format": "(name eq '%s')"
            },
            {
              "name": "deviceQuery",
              "type": "string",
              "description": "Filter by device query",
              "format": "(c8y_DeviceQueryString eq '%s')"
            },
            {
              "name": "fragmentType",
              "type": "string",
              "description": "Filter by fragment type",
              "format": "has(%s)"
            },
            {
              "name": "owner",
              "type": "string",
              "description": "Filter by owner",
              "format": "(owner eq '%s')"
            },
            {
              "name": "onlyInvisible",
              "type": "booleanDefault",
              "description": "Only include invisible smart groups",
              "value": "has(c8y_IsDynamicGroup.invisible)"
            },
            {
              "name": "onlyVisible",
              "type": "booleanDefault",
              "description": "Only include visible smart groups",
              "value": "not(has(c8y_IsDynamicGroup.invisible))"
            }
          ]
        },
        {
          "name": "skipChildrenNames",
          "type": "boolean",
          "description": "Don't include the child devices names in the response. This can improve the API response because the names don't need to be retrieved"
        },
        {
          "name": "withChildren",
          "type": "boolean",
          "description": "Determines if children with ID and name should be returned when fetching the managed object. Set it to false to improve query performance."
        },
        {
          "name": "withChildrenCount",
          "type": "boolean",
          "description": "When set to true, the returned result will contain the total number of children in the respective objects (childAdditions, childAssets and childDevices)"
        },
        {
          "name": "withGroups",
          "type": "boolean",
          "description": "When set to true it returns additional information about the groups to which the searched managed object belongs. This results in setting the assetParents property with additional information about the groups."
        },
        {
          "name": "withParents",
          "type": "boolean",
          "description": "Include a flat list of all parents and grandparents of the given object"
        }
      ]
    }
  ]
}
