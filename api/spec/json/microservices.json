{
  "information": {
    "name": "microservices",
    "description": "Cumulocity microservices",
    "descriptionLong": "REST endpoint to interact with Cumulocity microservices",
    "link": "https://cumulocity.com/guides/reference/applications/"
  },
  "endpoints": [
    {
      "name": "getMicroserviceCollection",
      "description": "Get microservice collection",
      "descriptionLong": "Get a collection of microservices in the current tenant\n",
      "method": "GET",
      "path": "/application/applications",
      "accept": "application/vnd.com.nsn.cumulocity.applicationCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.application+json",
      "collectionProperty": "applications",
      "alias": {
        "go": "list",
        "powershell": "Get-MicroserviceCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get microservices",
            "command": "Get-MicroserviceCollection -PageSize 100"
          }
        ],
        "go": [
          {
            "description": "Get microservices",
            "command": "c8y microservices list --pageSize 100"
          }
        ]
      },
      "queryParameters": [
        {
          "name": "type",
          "type": "string",
          "default": "MICROSERVICE",
          "validationSet": [
            "MICROSERVICE"
          ],
          "static": true,
          "description": "Application type"
        }
      ]
    },
    {
      "name": "newMicroservice",
      "skip": true,
      "description": "Create microservice",
      "descriptionLong": "Create a new microservice or update the application binary of an existing microservice",
      "method": "POST",
      "path": "/application/applications",
      "accept": "application/vnd.com.nsn.cumulocity.application+json",
      "alias": {
        "go": "create",
        "powershell": "New-Microservice"
      },
      "examples": {
        "powershell": [
          {
            "description": "Create new hosted application",
            "command": "New-Microservice -Name \"myapp\" -Type HOSTED -Key \"myapp-key\" -ContextPath \"myapp\"",
            "afterEach": [
              "Remove-Microservice -Id \"myapp\""
            ]
          }
        ],
        "go": [
          {
            "description": "Create new hosted application",
            "command": "c8y microservices create --name myapp --type HOSTED --key \"myapp-key\" --contextPath \"myapp\""
          }
        ]
      },
      "body": [
        {
          "name": "data",
          "type": "json",
          "description": "data"
        },
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "Name of microservice (or id if the microservice already exists)"
        },
        {
          "name": "key",
          "type": "string",
          "required": false,
          "description": "Shared secret of microservice"
        },
        {
          "name": "type",
          "type": "string",
          "static": true,
          "default": "MICROSERVICE",
          "validationSet": [
            "MICROSERVICE"
          ],
          "description": "Type of microservice. Possible values are MICROSERVICE"
        },
        {
          "name": "availability",
          "type": "string",
          "validationSet": [
            "MARKET",
            "PRIVATE"
          ],
          "required": false,
          "description": "Access level for other tenants. Possible values are : MARKET, PRIVATE (default)"
        },
        {
          "name": "contextPath",
          "type": "string",
          "required": false,
          "description": "contextPath of the hosted microservice."
        },
        {
          "name": "resourcesUrl",
          "type": "string",
          "required": false,
          "description": "URL to application base directory hosted on an external server. Required when application type is HOSTED"
        }
      ],
      "bodyRequiredKeys": [
        "name",
        "key"
      ]
    },
    {
      "name": "getMicroservice",
      "description": "Get microservice",
      "descriptionLong": "Get an existing microservice",
      "method": "GET",
      "path": "/application/applications/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.application+json",
      "alias": {
        "go": "get",
        "powershell": "Get-Microservice"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get an microservice by id",
            "beforeEach": [
              "$App = New-TestMicroservice -SkipUpload -SkipSubscription"
            ],
            "command": "Get-Microservice -Id $App.id",
            "skipTest": true,
            "afterEach": [
              "Remove-Microservice -Id $App.id"
            ]
          },
          {
            "description": "Get an microservice by name",
            "beforeEach": [
              "$App = New-TestMicroservice -SkipUpload -SkipSubscription"
            ],
            "command": "Get-Microservice -Id $App.name",
            "skipTest": true,
            "afterEach": [
              "Remove-Microservice -Id $App.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get an application",
            "command": "c8y microservices get --id 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "microservice",
          "pipeline": true,
          "required": true,
          "description": "Microservice id"
        }
      ]
    },
    {
      "name": "deleteMicroservice",
      "description": "Delete microservice",
      "descriptionLong": "Info: The application can only be removed when its availability is PRIVATE or in other case when it has no subscriptions.",
      "method": "DELETE",
      "path": "/application/applications/{id}",
      "alias": {
        "go": "delete",
        "powershell": "Remove-Microservice"
      },
      "examples": {
        "powershell": [
          {
            "description": "Delete a microservice by id",
            "beforeEach": [
              "$App = New-TestMicroservice -SkipUpload -SkipSubscription"
            ],
            "command": "Remove-Microservice -Id $App.id",
            "skipTest": true
          },
          {
            "description": "Delete a microservice by name",
            "beforeEach": [
              "$App = New-TestMicroservice -SkipUpload -SkipSubscription"
            ],
            "command": "Remove-Microservice -Id $App.name",
            "skipTest": true
          }
        ],
        "go": [
          {
            "description": "Delete an microservice by id",
            "command": "c8y microservices delete --id 12345"
          },
          {
            "description": "Delete a microservice by name",
            "command": "c8y microservices delete --id report-agent",
            "assertStdOut": {
              "json": {
                "path": "r//application/applications/\\d+$"
              }
            }
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "microservice",
          "pipeline": true,
          "required": true,
          "description": "Microservice id"
        }
      ]
    },
    {
      "name": "updateMicroservice",
      "description": "Update microservice details",
      "descriptionLong": "Update details of an existing microservice, i.e. availability, context path etc.\n",
      "method": "PUT",
      "path": "/application/applications/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.application+json",
      "alias": {
        "go": "update",
        "powershell": "Update-Microservice"
      },
      "examples": {
        "powershell": [
          {
            "description": "Update microservice availability to MARKET",
            "beforeEach": [
              "$App = New-TestMicroservice -SkipUpload -SkipSubscription"
            ],
            "command": "Update-Microservice -Id $App.id -Availability \"MARKET\"",
            "skipTest": true,
            "afterEach": [
              "Remove-Microservice -Id $App.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Update microservice availability to MARKET",
            "command": "c8y microservices update --id \"report-agent\" --availability MARKET",
            "assertStdOut": {
              "json": {
                "path": "r//application/applications/\\d+$"
              }
            }
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "microservice",
          "pipeline": true,
          "required": true,
          "description": "Microservice id"
        }
      ],
      "body": [
        {
          "name": "data",
          "type": "json",
          "description": "data"
        },
        {
          "name": "key",
          "type": "string",
          "required": false,
          "description": "Shared secret of microservice"
        },
        {
          "name": "availability",
          "type": "string",
          "validationSet": [
            "MARKET",
            "PRIVATE"
          ],
          "required": false,
          "description": "Access level for other tenants. Possible values are : MARKET, PRIVATE (default)"
        },
        {
          "name": "contextPath",
          "type": "string",
          "required": false,
          "description": "contextPath of the hosted application"
        },
        {
          "name": "resourcesUrl",
          "type": "string",
          "required": false,
          "description": "URL to microservice base directory hosted on an external server"
        }
      ]
    },
    {
      "name": "newMicroserviceBinary",
      "description": "Create microservice binary",
      "descriptionLong": "Create/upload a new microservice binary. For the applications of type 'MICROSERVICE' to be available for Cumulocity platform users, a binary zip file must be uploaded.\nFor the microservice application, the zip file must consist of    * cumulocity.json - file describing the deployment\n    * image.tar - executable docker image\n\nFor the web application, the zip file must include index.html in the root directory.\n",
      "method": "POST",
      "path": "/application/applications/{id}/binaries",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "createBinary",
        "powershell": "New-MicroserviceBinary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Upload microservice binary",
            "skipTest": true,
            "beforeEach": [
              "$App = New-TestMicroservice -SkipUpload -SkipSubscription",
              "$MicroserviceZip = \"$PSScriptRoot/TestData/microservice/helloworld.zip\""
            ],
            "command": "New-MicroserviceBinary -Id $App.id -File $MicroserviceZip",
            "afterEach": [
              "Remove-Microservice -Id $App.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Upload microservice binary",
            "command": "c8y microservices createBinary --id 12345 --file ./helloworld.zip",
            "skipTest": true
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "microservice",
          "pipeline": true,
          "required": true,
          "description": "Microservice id"
        }
      ],
      "body": [
        {
          "name": "file",
          "type": "file",
          "required": true,
          "description": "File to be uploaded as a binary"
        }
      ]
    },
    {
      "name": "getMicroserviceBootstrapUser",
      "description": "Get microservice bootstrap user",
      "descriptionLong": "Get the bootstrap user associated to a microservice. The bootstrap user is required when running a microservice locally (i.e. during development)\n",
      "method": "GET",
      "path": "/application/applications/{id}/bootstrapUser",
      "accept": "application/vnd.com.nsn.cumulocity.bootstrapuser+json",
      "alias": {
        "go": "getBootstrapUser",
        "powershell": "Get-MicroserviceBootstrapUser"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get application bootstrap user",
            "beforeEach": [
              "$App = New-TestMicroservice -SkipUpload -SkipSubscription"
            ],
            "command": "Get-MicroserviceBootstrapUser -Id $App.name",
            "skipTest": true,
            "afterEach": [
              "Remove-Microservice -Id $App.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get application bootstrap user by app id",
            "command": "c8y microservices getBootstrapUser --id 12345"
          },
          {
            "description": "Get application bootstrap user by app name",
            "command": "c8y microservices getBootstrapUser --id report-agent",
            "assertStdOut": {
              "json": {
                "path": "r//application/applications/\\d+/bootstrapUser$"
              }
            }
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "microservice",
          "pipeline": true,
          "required": true,
          "description": "Microservice id"
        }
      ]
    },
    {
      "name": "enableMicroservice",
      "description": "subscribe to microservice",
      "descriptionLong": "Enabling (subscribing) a microservice will activate the application in the tenant\n",
      "method": "POST",
      "path": "/tenant/tenants/{tenant}/applications",
      "accept": "application/vnd.com.nsn.cumulocity.applicationReference+json",
      "alias": {
        "go": "enable",
        "powershell": "Enable-Microservice"
      },
      "examples": {
        "powershell": [
          {
            "description": "Enable (subscribe) to a microservice",
            "beforeEach": [
              "$App = New-TestMicroservice -SkipUpload -SkipSubscription"
            ],
            "command": "Enable-Microservice -Id $App.id",
            "skipTest": true,
            "afterEach": [
              "Remove-Microservice -Id $App.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Enable (subscribe) to a microservice",
            "command": "c8y microservices enable --id 12345"
          },
          {
            "description": "Enable (subscribe) to a microservice by name",
            "command": "c8y microservices enable --id report-agent",
            "assertStdOut": {
              "json": {
                "body.application.id": "r/^\\d+$"
              }
            }
          }
        ]
      },
      "pathParameters": [
        {
          "name": "tenant",
          "type": "tenant",
          "required": false,
          "position": 99,
          "description": "Tenant id"
        }
      ],
      "body": [
        {
          "name": "id",
          "type": "microservice",
          "property": "application.id",
          "pipeline": true,
          "required": true,
          "description": "Microservice id"
        }
      ]
    },
    {
      "name": "disableMicroservice",
      "description": "unsubscribe microservice",
      "descriptionLong": "Disable (unsubscribe) a microservice from the current tenant\n",
      "method": "DELETE",
      "path": "/tenant/tenants/{tenant}/applications/{id}",
      "alias": {
        "go": "disable",
        "powershell": "Disable-Microservice"
      },
      "examples": {
        "powershell": [
          {
            "description": "Disable (unsubscribe) to a microservice",
            "beforeEach": [
              "$App = New-TestMicroservice -SkipUpload"
            ],
            "skipTest": true,
            "command": "Disable-Microservice -Id $App.id",
            "afterEach": [
              "Remove-Microservice -Id $App.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Disable (unsubscribe) to a microservice",
            "command": "c8y microservices disable --id 12345"
          },
          {
            "description": "Disable (unsubscribe) to a microservice",
            "command": "c8y microservices disable --id report-agent",
            "assertStdOut": {
              "json": {
                "path": "r//tenant/tenants/$C8Y_TENANT/applications/\\d+$"
              }
            }
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "microservice",
          "pipeline": true,
          "required": true,
          "description": "Microservice id"
        },
        {
          "name": "tenant",
          "type": "tenant",
          "required": false,
          "position": 99,
          "description": "Tenant id"
        }
      ]
    },
    {
      "name": "getStatus",
      "skip": false,
      "description": "Get microservice status",
      "descriptionLong": "Get the status of a microservice which is stored as a managed object\n",
      "method": "GET",
      "path": "/inventory/managedObjects?type=c8y_Application_{id}",
      "accept": "application/json",
      "collectionType": "application/vnd.com.nsn.cumulocity.application+json",
      "collectionProperty": "managedObjects",
      "alias": {
        "go": "getStatus",
        "powershell": "Get-MicroserviceStatus"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get microservice status",
            "command": "Get-MicroserviceStatus -Id 1234 -Dry"
          },
          {
            "description": "Get microservice status (using pipeline)",
            "command": "Get-MicroserviceCollection | Get-MicroserviceStatus -Dry"
          }
        ],
        "go": [
          {
            "description": "Get microservice status",
            "command": "c8y microservices getStatus --id 1234",
            "assertStdOut": {
              "json": {
                "path": "/inventory/managedObjects",
                "pathEncoded": "/inventory/managedObjects?type=c8y_Application_1234"
              }
            }
          },
          {
            "description": "Get microservice status (using pipeline)",
            "command": "c8y microservices list | c8y microservices getStatus",
            "assertStdOut": {
              "json": {
                "path": "/inventory/managedObjects",
                "pathEncoded": "/inventory/managedObjects?type=c8y_Application_1"
              }
            }
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "microservice",
          "pipeline": true,
          "required": true,
          "description": "Microservice id"
        }
      ]
    },
    {
      "name": "getLog",
      "skip": true,
      "description": "Get microservice logs",
      "descriptionLong": "Get logs of a microservice in the current tenant\n",
      "method": "GET",
      "path": "/application/applications/{id}/logs/{instance}",
      "addAccept": true,
      "accept": "application/vnd.com.nsn.cumulocity.applicationLogs+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.application+json",
      "collectionProperty": "logs",
      "alias": {
        "go": "getLog",
        "powershell": "Get-MicroserviceLog"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get microservice log entries",
            "command": "Get-MicroserviceLog -Id 1234 -Instance app1-scope-t12345-deployment-54dcf96599-rtn5d -Dry"
          }
        ],
        "go": [
          {
            "description": "Get microservice log entries",
            "command": "c8y microservices getLog --id 1234 --instance app1-scope-t12345-deployment-54dcf96599-rtn5d --dry"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "microservice",
          "pipeline": true,
          "required": true,
          "description": "Microservice id"
        },
        {
          "name": "instance",
          "type": "microserviceinstance",
          "required": true,
          "description": "Microservice instance"
        }
      ],
      "queryParameters": [
        {
          "name": "dateFrom",
          "type": "datetime",
          "description": "Start date or date and time of log entries."
        },
        {
          "name": "dateTo",
          "type": "datetime",
          "description": "End date or date and time of log entries."
        }
      ]
    }
  ]
}