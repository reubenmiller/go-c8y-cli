{
  "information": {
    "name": "firmware/patches",
    "description": "Cumulocity firmware patch management",
    "descriptionLong": "Firmware patch management to create/list/delete patches",
    "link": "https://cumulocity.com/guides/users-guide/device-management/#firmware-repo"
  },
  "endpoints": [
    {
      "name": "getFirmwarePatchCollection",
      "method": "GET",
      "description": "Get firmware patch collection",
      "descriptionLong": "Get a collection of firmware patches (managedObjects) based on filter parameters",
      "path": "inventory/managedObjects",
      "accept": "application/vnd.com.nsn.cumulocity.managedObjectCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "collectionProperty": "managedObjects",
      "alias": {
        "go": "list",
        "powershell": "Get-FirmwarePatchCollection"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a list of firmware patches related to a firmware package",
            "command": "Get-FirmwarePatchCollection -Firmware 12345",
            "skipTest": true
          },
          {
            "description": "Get a list of firmware patches where the dependency version starts with '1.'",
            "command": "Get-FirmwarePatchCollection -Firmware 12345 -Dependency '1.*'",
            "skipTest": true
          }
        ],
        "go": [
          {
            "description": "Get a list of firmware patches",
            "command": "c8y firmware patches list --firmware 12345",
            "assertStdOut": {
              "json": {
                "query": "r/bygroupid\\(12345\\) and has\\(c8y_Patch\\)"
              },
              "contains": [
                "bygroupid(12345)"
              ]
            }
          },
          {
            "description": "Get a list of firmware patches where the dependency version starts with '1.'",
            "command": "c8y firmware patches list --firmware 12345 --dependency '1.*'",
            "assertStdOut": {
              "json": {
                "query": "r/bygroupid\\(12345\\) and has\\(c8y_Patch\\) and \\(c8y_Patch.dependency eq '1\\.\\*'\\)"
              },
              "contains": [
                "bygroupid(12345)",
                "c8y_Patch.dependency eq '1.*'"
              ]
            }
          }
        ]
      },
      "queryParameters": [
        {
          "name": "query",
          "description": "Query expression group",
          "property": "query",
          "type": "queryExpression",
          "children": [
            {
              "name": "query",
              "type": "string",
              "description": "Additional query filter",
              "format": "%s"
            },
            {
              "name": "queryTemplate",
              "type": "string",
              "description": "String template to be used when applying the given query. Use %s to reference the query/pipeline input"
            },
            {
              "name": "orderBy",
              "type": "string",
              "description": "Order by. e.g. _id asc or name asc or creationTime.date desc",
              "default": "creationTime.date desc"
            },
            {
              "name": "firmware",
              "type": "[]firmware",
              "description": "Firmware package id or name",
              "format": "bygroupid(%s)",
              "required": true,
              "pipeline": true,
              "pipelineAliases": [
                "additionParents.references.0.managedObject.id",
                "id"
              ]
            },
            {
              "name": "ignorePatches",
              "type": "stringStatic",
              "description": "",
              "value": "has(c8y_Patch)"
            },
            {
              "name": "dependency",
              "type": "string",
              "format": "(c8y_Patch.dependency eq '%s')",
              "description": "Patch dependency version"
            },
            {
              "name": "version",
              "type": "string",
              "format": "(c8y_Firmware.version eq '%s')",
              "description": "Patch version"
            },
            {
              "name": "url",
              "type": "string",
              "description": "Filter by url",
              "format": "(c8y_Firmware.url eq '%s')"
            }
          ]
        },
        {
          "name": "skipChildrenNames",
          "type": "boolean",
          "description": "Don't include the child devices names in the response. This can improve the API response because the names don't need to be retrieved"
        },
        {
          "name": "withChildren",
          "type": "boolean",
          "description": "Determines if children with ID and name should be returned when fetching the managed object. Set it to false to improve query performance."
        },
        {
          "name": "withChildrenCount",
          "type": "boolean",
          "description": "When set to true, the returned result will contain the total number of children in the respective objects (childAdditions, childAssets and childDevices)"
        },
        {
          "name": "withGroups",
          "type": "boolean",
          "description": "When set to true it returns additional information about the groups to which the searched managed object belongs. This results in setting the assetParents property with additional information about the groups."
        },
        {
          "name": "withParents",
          "type": "booleanDefault",
          "description": "Include parent references",
          "default": "true"
        }
      ]
    },
    {
      "name": "getFirmwarePatch",
      "description": "Get firmware patch",
      "descriptionLong": "Get an existing firmware patch",
      "method": "GET",
      "path": "inventory/managedObjects/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.managedObject+json",
      "alias": {
        "go": "get",
        "powershell": "Get-FirmwarePatch"
      },
      "examples": {
        "powershell": [
          {
            "description": "Get a firmware patch",
            "beforeEach": [
              "$mo = PSc8y\\New-ManagedObject -Name \"testMO\""
            ],
            "command": "Get-FirmwarePatch -Id $mo.id",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          },
          {
            "description": "Get a firmware package (using pipeline)",
            "beforeEach": [
              "$mo = PSc8y\\New-ManagedObject -Name \"testMO\""
            ],
            "command": "Get-ManagedObject -Id $mo.id | Get-FirmwarePatch",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          }
        ],
        "go": [
          {
            "description": "Get a firmware patch",
            "command": "c8y firmware patches get --firmware 11111 --id 1.0.0",
            "skipTest": true
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]firmwarepatch",
          "dependsOn": [
            "firmware"
          ],
          "pipeline": true,
          "required": true,
          "description": "Firmware patch id or name"
        },
        {
          "name": "firmware",
          "type": "[]firmware",
          "required": false,
          "description": "Firmware package id or name (used to help completion be more accurate)"
        }
      ],
      "queryParameters": [
        {
          "name": "withParents",
          "type": "booleanDefault",
          "description": "Include parent references",
          "default": "true"
        }
      ]
    },
    {
      "name": "deletePatch",
      "description": "Delete firmware package version patch",
      "descriptionLong": "Delete an existing firmware package version patch",
      "method": "DELETE",
      "path": "inventory/managedObjects/{id}",
      "accept": "",
      "alias": {
        "go": "delete",
        "powershell": "Remove-FirmwarePatch"
      },
      "examples": {
        "powershell": [
          {
            "description": "Delete a firmware package version patch",
            "beforeEach": [
              "$mo = PSc8y\\New-ManagedObject -Name \"testMO\""
            ],
            "command": "Remove-FirmwarePatch -Id $mo.id",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          },
          {
            "description": "Delete a firmware patch (using pipeline)",
            "beforeEach": [
              "$mo = PSc8y\\New-ManagedObject -Name \"testMO\""
            ],
            "command": "Get-ManagedObject -Id $mo.id | Remove-FirmwarePatch",
            "afterEach": [
              "Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue"
            ]
          },
          {
            "description": "Delete a firmware patch and related binary",
            "beforeEach": [
              "$Device = PSc8y\\New-TestDevice",
              "$ChildDevice = PSc8y\\New-TestDevice",
              "PSc8y\\Add-ManagedObjectChild -ChildType device -Id $Device.id -Child $ChildDevice.id"
            ],
            "command": "Get-ManagedObject -Id $Device.id | Remove-FirmwarePatch -ForceCascade",
            "afterEach": [
              "Remove-ManagedObject -Id $Device.id -ErrorAction SilentlyContinue",
              "Remove-ManagedObject -Id $ChildDevice.id -ErrorAction SilentlyContinue"
            ]
          }
        ],
        "go": [
          {
            "description": "Delete a firmware patch and related binary",
            "command": "c8y firmware patches delete --id 12345"
          },
          {
            "description": "Delete a firmware patch (but keep the related binary)",
            "command": "c8y firmware patches delete --id 12345 --forceCascade=false"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]firmwarepatch",
          "dependsOn": [
            "firmware"
          ],
          "pipeline": true,
          "required": true,
          "description": "Firmware patch id or name"
        },
        {
          "name": "firmware",
          "type": "[]firmware",
          "required": false,
          "description": "Firmware id or name (used to help completion be more accurate)"
        }
      ],
      "queryParameters": [
        {
          "name": "forceCascade",
          "type": "booleanDefault",
          "default": "true",
          "description": "Remove version and any related binaries"
        }
      ]
    }
  ]
}
