{
  "information": {
    "name": "events",
    "description": "Cumulocity events",
    "descriptionLong": "REST endpoint to interact with Cumulocity events",
    "link": "https://cumulocity.com/guides/reference/events/"
  },
  "endpoints": [
    {
      "name": "getEventCollection",
      "method": "GET",
      "description": "Get event collection",
      "descriptionLong": "Get a collection of events based on filter parameters",
      "examples": {
        "powershell": [
          {
            "description": "Get events with type 'my_CustomType' that were created in the last 10 days",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = PSc8y\\New-Event -Device $Device.id -Type \"my_CustomType2\" -Time \"-9d\" -Text \"Test event\""
            ],
            "command": "Get-EventCollection -Type \"my_CustomType2\" -DateFrom \"-10d\"",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $Device.id"
            ]
          },
          {
            "description": "Get events from a device",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = PSc8y\\New-Event -Device $Device.id -Type \"my_CustomType2\" -Time \"-9d\" -Text \"Test event\""
            ],
            "command": "Get-EventCollection -Device $Device.id",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $Device.id"
            ]
          },
          {
            "description": "Get events from a device (using pipeline)",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = PSc8y\\New-Event -Device $Device.id -Type \"my_CustomType2\" -Time \"-9d\" -Text \"Test event\""
            ],
            "command": "Get-DeviceCollection -Name $Device.name | Get-EventCollection",
            "afterEach": [
              "PSc8y\\Remove-ManagedObject -Id $Device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Get events with type 'my_CustomType' that were created in the last 10 days",
            "command": "c8y events list --type my_CustomType --dateFrom \"-10d\""
          },
          {
            "description": "Get events from a device",
            "command": "c8y events list --device 12345"
          }
        ]
      },
      "path": "event/events",
      "accept": "application/vnd.com.nsn.cumulocity.eventCollection+json",
      "collectionType": "application/vnd.com.nsn.cumulocity.event+json",
      "collectionProperty": "events",
      "alias": {
        "go": "list",
        "powershell": "Get-EventCollection"
      },
      "queryParameters": [
        {
          "name": "device",
          "type": "[]device",
          "pipeline": true,
          "property": "source",
          "description": "Device ID"
        },
        {
          "name": "type",
          "type": "string",
          "description": "Event type."
        },
        {
          "name": "fragmentType",
          "type": "string",
          "description": "Fragment name from event."
        },
        {
          "name": "fragmentValue",
          "type": "string",
          "description": "Allows filtering events by the fragment's value, but only when provided together with fragmentType."
        },
        {
          "name": "createdFrom",
          "type": "datetime",
          "description": "Start date or date and time of the event's creation (set by the platform during creation)."
        },
        {
          "name": "createdTo",
          "type": "datetime",
          "description": "End date or date and time of the event's creation (set by the platform during creation)."
        },
        {
          "name": "dateFrom",
          "type": "datetime",
          "description": "Start date or date and time of event occurrence."
        },
        {
          "name": "dateTo",
          "type": "datetime",
          "description": "End date or date and time of event occurrence."
        },
        {
          "name": "lastUpdatedFrom",
          "type": "datetime",
          "description": "Start date or date and time of the last update made."
        },
        {
          "name": "lastUpdatedTo",
          "type": "datetime",
          "description": "End date or date and time of the last update made."
        },
        {
          "name": "revert",
          "type": "boolean",
          "description": "Return the newest instead of the oldest events. Must be used with dateFrom and dateTo parameters"
        },
        {
          "name": "withSourceAssets",
          "type": "boolean",
          "description": "When set to true also events for related source assets will be included in the request. When this parameter is provided a source must be specified."
        },
        {
          "name": "withSourceDevices",
          "type": "boolean",
          "description": "When set to true also events for related source devices will be included in the request. When this parameter is provided a source must be specified."
        }
      ]
    },
    {
      "name": "deleteEventCollection",
      "description": "Delete event collection",
      "descriptionLong": "Delete a collection of events by using a filter",
      "method": "DELETE",
      "path": "event/events",
      "accept": "",
      "examples": {
        "powershell": [
          {
            "description": "Remove events with type 'my_CustomType' that were created in the last 10 days",
            "command": "Remove-EventCollection -Type my_CustomType -DateFrom \"-10d\""
          },
          {
            "description": "Remove events from a device",
            "command": "Remove-EventCollection -Device \"{{ randomdevice }}\""
          }
        ],
        "go": [
          {
            "description": "Remove events with type 'my_CustomType' that were created in the last 10 days",
            "command": "c8y events deleteCollection --type my_CustomType --dateFrom \"-10d\""
          },
          {
            "description": "Remove events from a device",
            "command": "c8y events deleteCollection --device 12345"
          }
        ]
      },
      "alias": {
        "go": "deleteCollection",
        "powershell": "Remove-EventCollection"
      },
      "queryParameters": [
        {
          "name": "device",
          "type": "[]device",
          "property": "source",
          "pipeline": true,
          "description": "Device ID"
        },
        {
          "name": "type",
          "type": "string",
          "description": "Event type."
        },
        {
          "name": "fragmentType",
          "type": "string",
          "description": "Fragment name from event."
        },
        {
          "name": "createdFrom",
          "type": "datetime",
          "description": "Start date or date and time of the event's creation (set by the platform during creation)."
        },
        {
          "name": "createdTo",
          "type": "datetime",
          "description": "End date or date and time of the event's creation (set by the platform during creation)."
        },
        {
          "name": "dateFrom",
          "type": "datetime",
          "description": "Start date or date and time of event occurrence."
        },
        {
          "name": "dateTo",
          "type": "datetime",
          "description": "End date or date and time of event occurrence."
        },
        {
          "name": "revert",
          "type": "boolean",
          "description": "Return the newest instead of the oldest events. Must be used with dateFrom and dateTo parameters"
        }
      ]
    },
    {
      "name": "getEvent",
      "description": "Get event",
      "descriptionLong": "Get an existing event by id",
      "method": "GET",
      "path": "event/events/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.event+json",
      "examples": {
        "powershell": [
          {
            "description": "Get event",
            "command": "Get-Event -Id {{ NewEvent }}"
          }
        ],
        "go": [
          {
            "description": "Get event",
            "command": "c8y events get --id 12345"
          }
        ]
      },
      "alias": {
        "go": "get",
        "powershell": "Get-Event"
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Event id"
        }
      ]
    },
    {
      "name": "newEvent",
      "method": "POST",
      "path": "event/events",
      "accept": "application/vnd.com.nsn.cumulocity.event+json",
      "description": "Create event",
      "descriptionLong": "Create a new event for a device",
      "examples": {
        "powershell": [
          {
            "description": "Create a new event for a device",
            "beforeEach": [
              "$device = New-TestDevice"
            ],
            "command": "New-Event -Device $device.id -Type c8y_TestEvent -Text \"Test event\"",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          },
          {
            "description": "Create a new event for a device (using pipeline)",
            "beforeEach": [
              "$device = New-TestDevice"
            ],
            "command": "Get-Device -Id $device.id | PSc8y\\New-Event -Type c8y_TestEvent -Time \"-0s\" -Text \"Test event\"",
            "afterEach": [
              "Remove-ManagedObject -Id $device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Create a new event for a device",
            "command": "c8y events create --device 12345 --type c8y_TestEvent --text \"Test event\""
          },
          {
            "description": "Create a new event for a device (using pipeline)",
            "command": "c8y devices get --id 12345 | c8y events create --type c8y_TestEvent --text \"Test event\""
          }
        ]
      },
      "alias": {
        "go": "create",
        "powershell": "New-Event"
      },
      "body": [
        {
          "name": "device",
          "type": "[]device",
          "required": false,
          "pipeline": true,
          "property": "source.id",
          "description": "The ManagedObject which is the source of this event."
        },
        {
          "name": "time",
          "type": "datetime",
          "required": false,
          "default": "",
          "description": "Time of the event. Defaults to current timestamp."
        },
        {
          "name": "type",
          "type": "string",
          "required": false,
          "description": "Identifies the type of this event."
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text description of the event."
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties of the event."
        }
      ],
      "bodyTemplate": {
        "type": "jsonnet",
        "applyLast": false,
        "template": "{time: _.Now('0s')}"
      },
      "bodyRequiredKeys": [
        "type",
        "text",
        "time",
        "source.id"
      ]
    },
    {
      "name": "updateEvent",
      "method": "PUT",
      "path": "event/events/{id}",
      "accept": "application/vnd.com.nsn.cumulocity.event+json",
      "description": "Update event",
      "descriptionLong": "Update an existing event",
      "examples": {
        "powershell": [
          {
            "description": "Update the text field of an existing event",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = New-TestEvent -Device $Device.id"
            ],
            "command": "Update-Event -Id $Event.id -Text \"example text 1\"",
            "afterEach": [
              "Remove-ManagedObject -Id $Device.id"
            ]
          },
          {
            "description": "Update custom properties of an existing event",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = New-TestEvent -Device $Device.id"
            ],
            "command": "Update-Event -Id $Event.id -Data @{ my_event = @{ active = $true } }",
            "afterEach": [
              "Remove-ManagedObject -Id $Device.id"
            ]
          },
          {
            "description": "Update custom properties of an existing event (using pipeline)",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = New-TestEvent -Device $Device.id"
            ],
            "command": "Get-Event -Id $Event.id | Update-Event -Data @{ my_event = @{ active = $true } }",
            "afterEach": [
              "Remove-ManagedObject -Id $Device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Update the text field of an existing event",
            "command": "c8y events update --id 12345 --text \"example text 1\""
          },
          {
            "description": "Update custom properties of an existing event",
            "command": "c8y events update --id 12345 --data \"{\\\"my_event\\\":{\\\"active\\\": true }}\""
          }
        ]
      },
      "alias": {
        "go": "update",
        "powershell": "Update-Event"
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Event id"
        }
      ],
      "body": [
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text description of the event."
        },
        {
          "name": "data",
          "type": "json",
          "description": "Additional properties of the event."
        }
      ]
    },
    {
      "name": "deleteEvent",
      "description": "Delete event",
      "descriptionLong": "Delete an existing event",
      "examples": {
        "powershell": [
          {
            "description": "Delete an event",
            "command": "Remove-Event -Id {{ NewEvent }}"
          }
        ],
        "go": [
          {
            "description": "Delete an event",
            "command": "c8y events delete --id 12345"
          }
        ]
      },
      "method": "DELETE",
      "path": "event/events/{id}",
      "accept": "",
      "alias": {
        "go": "delete",
        "powershell": "Remove-Event"
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Event id"
        }
      ]
    },
    {
      "name": "getEventBinary",
      "description": "Get event binary",
      "descriptionLong": "Get the binary associated with an event\n\nWhen downloading a binary it is useful to use the outputFileRaw global parameter and to use one of the following references:\n\n* {filename} - Filename found in the Content-Disposition response header\n* {id} - An id like value found in the request path (/event/events/12345/binaries => 12345)\n* {basename} - The last path section of the request path (/some/nested/url/withafilename.json => withafilename.json)\n",
      "method": "GET",
      "path": "event/events/{id}/binaries",
      "accept": "*/*",
      "alias": {
        "go": "downloadBinary",
        "powershell": "Get-EventBinary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Download a binary related to an event",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = New-TestEvent -Device $Device.id",
              "$TestFile = New-TestFile",
              "New-EventBinary -Id $Event.id -File $TestFile",
              "Remove-Item $TestFile"
            ],
            "command": "Get-EventBinary -Id $Event.id -OutputFileRaw ./eventbinary.txt",
            "afterEach": [
              "Remove-Item \"./eventbinary.txt\"",
              "Remove-ManagedObject -Id $Device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Download a binary related to an event",
            "command": "c8y events downloadBinary --id 12345 --outputFileRaw ./eventbinary.txt"
          },
          {
            "description": "Download a list of event binaries and use a template name to save each binary individually",
            "command": "c8y events list --fragmentType \"c8y_IsBinary\" | c8y events downloadBinary --outputFileRaw \"./output/binary-{id}-{filename}\" > /dev/null",
            "skipTest": true
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Event id"
        }
      ]
    },
    {
      "name": "newEventBinary",
      "description": "Create event binary",
      "descriptionLong": "Upload a new binary file to an event",
      "method": "POST",
      "path": "event/events/{id}/binaries",
      "accept": "application/vnd.com.nsn.cumulocity.event+json",
      "alias": {
        "go": "createBinary",
        "powershell": "New-EventBinary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Add a binary to an event",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = New-TestEvent -Device $Device.id",
              "$TestFile = New-TestFile"
            ],
            "command": "New-EventBinary -Id $Event.id -File $TestFile",
            "afterEach": [
              "Remove-Item $TestFile",
              "Remove-ManagedObject -Id $Device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Add a binary to an event",
            "command": "c8y events createBinary --id 12345 --file ./myfile.log"
          },
          {
            "description": "Add a binary to an event using a custom name",
            "skipTest": true,
            "command": "c8y events createBinary --id 12345 --file \"./myfile-2022-03-31.log\"\n"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Event id"
        }
      ],
      "body": [
        {
          "name": "file",
          "type": "attachment",
          "required": true,
          "description": "File to be uploaded as a binary"
        },
        {
          "name": "name",
          "type": "string",
          "description": "Set the name of the binary file. This will be the name of the file when it is downloaded in the UI"
        },
        {
          "name": "type",
          "type": "string",
          "required": false,
          "description": "Not used"
        }
      ]
    },
    {
      "name": "updateEventBinary",
      "description": "Update event binary",
      "descriptionLong": "Update an existing event binary\n",
      "method": "PUT",
      "path": "event/events/{id}/binaries",
      "accept": "application/vnd.com.nsn.cumulocity.event+json",
      "alias": {
        "go": "updateBinary",
        "powershell": "Update-EventBinary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Update a binary related to an event",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = New-TestEvent -Device $Device.id -WithBinary",
              "$TestFile = New-TestFile"
            ],
            "command": "Update-EventBinary -Id $Event.id -File $TestFile",
            "afterEach": [
              "Remove-Item $TestFile",
              "Remove-ManagedObject -Id $Device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Update a binary related to an event",
            "command": "c8y events updateBinary --id 12345 --file ./myfile.log"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Event id"
        }
      ],
      "bodyTemplate": {
        "type": "none"
      },
      "bodyContent": {
        "type": "binary"
      },
      "body": [
        {
          "name": "file",
          "type": "fileContents",
          "required": true,
          "description": "File to be uploaded as a binary"
        }
      ]
    },
    {
      "name": "deleteEventBinary",
      "description": "Delete event binary",
      "descriptionLong": "Delete a binary which has been attached to an event\n",
      "method": "DELETE",
      "path": "event/events/{id}/binaries",
      "accept": "",
      "alias": {
        "go": "deleteBinary",
        "powershell": "Remove-EventBinary"
      },
      "examples": {
        "powershell": [
          {
            "description": "Delete an binary attached to an event",
            "beforeEach": [
              "$Device = New-TestDevice",
              "$Event = New-TestEvent -Device $Device.id",
              "$TestFile = New-TestFile",
              "New-EventBinary -Id $Event.id -File $TestFile"
            ],
            "command": "Remove-EventBinary -Id $Event.id",
            "afterEach": [
              "Remove-Item $TestFile",
              "Remove-ManagedObject -Id $Device.id"
            ]
          }
        ],
        "go": [
          {
            "description": "Delete an binary attached to an event",
            "command": "c8y events deleteBinary --id 12345"
          }
        ]
      },
      "pathParameters": [
        {
          "name": "id",
          "type": "[]id",
          "required": true,
          "pipeline": true,
          "description": "Event id"
        }
      ]
    }
  ]
}
