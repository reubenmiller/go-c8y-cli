# yaml-language-server: $schema=../schema.json
---
information:
  name: software
  description: Cumulocity software management
  descriptionLong: Software management to create/list/delete packages and versions
  link: https://cumulocity.com/guides/users-guide/device-management/#software-repo

endpoints:
  - name: getSoftwareCollection
    method: GET
    description: Get software collection
    descriptionLong: Get a collection of software packages (managedObjects) based on filter parameters
    path: inventory/managedObjects
    accept: application/vnd.com.nsn.cumulocity.managedObjectCollection+json
    collectionType: application/vnd.com.nsn.cumulocity.managedObject+json
    collectionProperty: managedObjects
    alias:
        go: list
        powershell: Get-SoftwareCollection
    examples:
      powershell:
        - description: Get a list of software packages
          command: Get-SoftwareCollection

      go:
        - description: Get a list of software packages
          command: c8y software list
          skipTest: true
        
        - description: Get a list of software packages starting with "python3"
          command: c8y software list --name "python3*"
          skipTest: true

    queryParameters:
      - name: query
        description: Query expression group
        property: query
        type: queryExpression
        children:
          - name: query
            type: string
            description: Additional query filter
            format: "%s"
            pipeline: true
            pipelineAliases:
              - c8y_DeviceQueryString
          
          - name: queryTemplate
            type: string
            description: String template to be used when applying the given query. Use %s to reference the query/pipeline input
          
          - name: orderBy
            type: string
            description: Order by. e.g. _id asc or name asc or creationTime.date desc
            default: name
          
          - name: software
            type: stringStatic
            description: ""
            value: "(type eq 'c8y_Software')"

          - name: name
            type: string
            description: Filter by name
            format: (name eq '%s')

          - name: deviceType
            type: string
            description: Filter by deviceType
            format: (c8y_Filter.type eq '%s')

          - name: description
            type: string
            description: Filter by description
            format: (description eq '%s')

      - name: skipChildrenNames
        type: boolean
        description: Don't include the child devices names in the response. This can improve the API response because the names don't need to be retrieved

      - name: withChildren
        type: boolean
        description: Determines if children with ID and name should be returned when fetching the managed object. Set it to false to improve query performance.

      - name: withChildrenCount
        type: boolean
        description: When set to true, the returned result will contain the total number of children in the respective objects (childAdditions, childAssets and childDevices)
      
      - name: withGroups
        type: boolean
        description: When set to true it returns additional information about the groups to which the searched managed object belongs. This results in setting the assetParents property with additional information about the groups.

      - name: withParents
        type: boolean
        description: Include a flat list of all parents and grandparents of the given object

  - name: newSoftware
    method: POST
    path: inventory/managedObjects
    accept: application/vnd.com.nsn.cumulocity.inventory+json
    description: Create software package
    descriptionLong: Create a new software package (managedObject)
    alias:
        go: create
        powershell: New-Software
    examples:
      powershell:
        - description: Create a software package
          beforeEach:
            - $type = New-RandomString -Prefix "customType_"
          command: New-Software -Name "python3-requests" -Description "python requests library" -Data @{$type=@{}}
          afterEach:
            - Get-ManagedObjectCollection -FragmentType $type | Remove-ManagedObject

      go:
        - description: Create a software package
          command: c8y software create --name "python3-requests" --description "python requests library"
        
        - description: Create a software package which is only applicable for a specific device type
          command: c8y software create --name "python3-requests" --description "python requests library" --deviceType "c8y_Linux"
        
        - description: Create the same software package for multiple device types
          command: echo -e "c8y_Linux\nc8y_MacOS" | c8y software create --name "python3-requests" --description "python requests library"
          assertStdOut:
            line-count: 2
            json:
              ..0.method: POST
              ..0.body.name: python3-requests
              ..0.body.description: python requests library
              ..0.body.c8y_Filter.type: c8y_Linux
              ..1.method: POST
              ..1.body.name: python3-requests
              ..1.body.description: python requests library
              ..1.body.c8y_Filter.type: c8y_MacOS

        - description: Create a software package and create a new version
          skipTest: true
          command: c8y software create --name "python3-requests" | c8y software versions create --version "1.0.0" --file "python3-requests.deb"
          assertStdOut:
            json:
              body.c8y_Software.version: "1.0.0"
    body:
      - name: name
        type: string
        required: false
        description: name
        pipeline: false
        pipelineAliases:
          - "name"
      
      - name: description
        type: string
        required: false
        description: Description of the software package

      - name: deviceType
        type: string
        property: c8y_Filter.type
        required: false
        description: Device type filter. Only allow software to be applied to devices of this type
        pipeline: true
        pipelineAliases:
          - "c8y_Filter.type"
          - "deviceType"
          - "type"

      - name: data
        type: json
        description: Additional properties of the software package.

    bodyTemplates:
      - type: jsonnet
        applyLast: false
        template: "{type: 'c8y_Software', c8y_Global:{}}"
    bodyRequiredKeys:
      - "type"
      - "name"

  - name: getSoftware
    description: Get software
    descriptionLong: Get an existing software package (managedObject)
    method: GET
    path: inventory/managedObjects/{id}
    accept: application/vnd.com.nsn.cumulocity.inventory+json
    alias:
        go: get
        powershell: Get-Software
    examples:
      powershell:
        - description: Get a software package
          beforeEach:
            - $mo = PSc8y\New-ManagedObject -Name "testMO"
          command: Get-Software -Id $mo.id
          afterEach:
            - Remove-ManagedObject -Id $mo.id

        - description: Get a software package (using pipeline)
          beforeEach:
            - $mo = PSc8y\New-ManagedObject -Name "testMO"
          command: Get-ManagedObject -Id $mo.id | Get-Software
          afterEach:
            - Remove-ManagedObject -Id $mo.id

      go:
        - description: Get a software package
          command: c8y software get --id 12345

    pathParameters:
      - name: id
        type: '[]software'
        pipeline: true
        required: true
        description: Software package (managedObject) id

    queryParameters:
      - name: skipChildrenNames
        type: boolean
        description: Don't include the child devices names in the response. This can improve the API response because the names don't need to be retrieved

      - name: withChildren
        type: boolean
        description: Determines if children with ID and name should be returned when fetching the managed object. Set it to false to improve query performance.

      - name: withChildrenCount
        type: boolean
        description: When set to true, the returned result will contain the total number of children in the respective objects (childAdditions, childAssets and childDevices)
      
      - name: withGroups
        type: boolean
        description: When set to true it returns additional information about the groups to which the searched managed object belongs. This results in setting the assetParents property with additional information about the groups.

      - name: withParents
        type: boolean
        description: Include a flat list of all parents and grandparents of the given object

  - name: updateSoftware
    method: PUT
    path: inventory/managedObjects/{id}
    accept: application/vnd.com.nsn.cumulocity.inventory+json
    description: Update software
    descriptionLong: Update an existing software package (managedObject)
    alias:
        go: update
        powershell: Update-Software
    examples:
      powershell:
        - description: Update a software package
          beforeEach:
            - $mo = PSc8y\New-ManagedObject -Name "testMO"
          command: Update-Software -Id $mo.id -Data @{ com_my_props = @{ value = 1 } }
          afterEach:
            - Remove-ManagedObject -Id $mo.id

        - description: Update a software package (using pipeline)
          beforeEach:
            - $mo = PSc8y\New-ManagedObject -Name "testMO"
          command: Get-ManagedObject -Id $mo.id | Update-Software -Data @{ com_my_props = @{ value = 1 } }
          afterEach:
            - Remove-ManagedObject -Id $mo.id

      go:
        - description: Update a software package
          command: 'c8y software update --id 12345 --newName "my_custom_name" --data "{\"com_my_props\":{},\"value\":1}"'
    body:
      - name: newName
        property: name
        type: string
        required: false
        description: New software package name

      - name: description
        type: string
        required: false
        description: Description of the software package
      
      - name: deviceType
        type: string
        property: c8y_Filter.type
        required: false
        description: Device type filter. Only allow software to be applied to devices of this type

      - name: data
        type: json
        description: Additional properties of the software package.

    pathParameters:
      - name: id
        type: '[]software'
        pipeline: true
        description: Software package (managedObject) id
        required: true

  - name: deleteSoftware
    description: Delete software package
    descriptionLong: Delete an existing software package
    method: DELETE
    path: inventory/managedObjects/{id}
    accept: ''
    alias:
        go: delete
        powershell: Remove-Software
    examples:
      powershell:
        - description: Delete a software package and all related versions
          beforeEach:
            - $mo = PSc8y\New-Software -Name "python3-requests"
          command: Get-ManagedObject -Id $mo.id | Remove-Software -ForceCascade:$false
          afterEach:
            - Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue

        - description: Delete a software package (using pipeline)
          beforeEach:
            - $mo = PSc8y\New-ManagedObject -Name "testMO"
          command: Get-ManagedObject -Id $mo.id | Remove-Software
          afterEach:
            - Remove-ManagedObject -Id $mo.id -ErrorAction SilentlyContinue

      go:
        - description: Delete a software package and all related versions
          command: c8y software delete --id 12345

        - description: Delete a software package but keep all related versions
          command: c8y software delete --id 12345 --forceCascade=false
    pathParameters:
      - name: id
        type: '[]software'
        pipeline: true
        required: true
        description: Software Package (managedObject) id

    queryParameters:
      - name: forceCascade
        type: booleanDefault
        default: 'true'
        description: Remove version and any related binaries
